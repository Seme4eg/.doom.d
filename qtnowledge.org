#+TITLE: Qtnowledge
#+STARTUP: overview hideblocks

* Basics & keybindings [[qute://help/img/cheatsheet-big.png][cheatsheet]]

=:help=

[[https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer#139193][clipboard vs selection]]. Basically selection - *reg ***, clipboard - *reg *0*

- o/O :: new webpage (~O~ for new tab). If given string entry wasn't url QT will
  use searchengine.
- J/K :: next / prev tab
- M-{num} :: go to {num} tab
- d/u :: close / reopen tab
- H/L :: go back / forth in history
- f/F :: show hints (like =avy=) to go anywhere without a mouse (~F~ for new tab)
- hjkl, :, /, :q/wq ... :: all same as in vim

- q/@ :: record/run macro
- r/R :: reload / reload (bypass cache)
- T :: tab select
- v/V :: v for *caret* mode and ~V~ for *visual line* mode
- `/' :: set/jump scroll mark (*unset* in default config tho presents in
  cheatsheet)

_Zoom:_ ~+/-/=~ - inc/dec/reset

- cd :: download-clear
- ZQ/Z :: quit(save)
- Sh :: history

** Yanking & pasting
- yy :: copy/yank URL
- yY :: copy URL to selection
- yt :: copy title to clipboard
- yT :: copy title to selection

_Pasting:_
- pp :: open URL from clipboard
- pP :: open URL from selection
- Pp :: like pp, in new tab
- PP :: like pP, in new tab
- wp :: like pp, in new window
- wP :: like pP, in new window

** Navigation & opening
- [ [ or ] ] :: click 'previous/next'-link on page (~{{ / }}~ same but in *new*
  tab). Useful on sites like org-mode documentation, where this kind of links
  actually presents.
- C-a/x :: increment / decrement no. in URL
- t/w h/l :: back/forward (~h/l~) in new tab/window (~t/w~)

_Back/forward_ ~t/w h/l~ - back/forward in new tab/window

_Opening:_
- xo/O :: open in background tab (~O~ for based on cur. URL)
- go/O :: open based on cur. URL (~O~ for new tab)

** ~g~ open / move
- 0/$ :: focus first / last tab
- a :: open search page
- b/B :: open bookmark / quickmark (~B~ for new tab)
- d (ad) :: download page (~ad~ to cancel download (without 'g' prefix))
- f :: view page source
- i :: *hint inputs* -- choose input on page and enter insert mode #USEIT
- m :: move tab to first place
- t :: tab select (didn't get the difference between =tab select= & =tab focus= (T))
- u/U :: *navigate up* (in new _window_) -- basically each call of this command removes
  each part of URL. 'url.com/user/sets' becomes 'url.com/user' #USEIT
- C :: clone tab
- D :: tab give -- move current tab to new _window
- J/K :: tab-move +/- -- move current tab right/left
** Tab-related commands (~tab-~)
- J/K :: *next/prev* (accepts [count])
- d / C-w :: *close*
- gC :: *clone*
- T :: *focus* - select tab given as argument/count
- gt :: *select* tab by index/url/title best match
- gD :: *give* cur. tab to a new or existing window if win_id given
- gm :: *move* cur. tab according to the argument and [count]
- M-m :: *mute/unmute* cur./[count]th tab
- co :: *only* - close all tabs except for the cur. one
- C-p :: *pin/unpin* cur./[count]th tab

** Keybindings that can be prefixed with ~w~ (window & devtools)
- b :: open quickmark in new window
- f :: hint all window (didn't get the benefit of using 'w' prefix here tho)
- h/l :: back / forward current page history in new window
- o/O :: open in new window

_Devtools:_
- ~i~ :: open devtools (web inspector)
- If :: devtools-focus (if it's opened)
- I hjkl :: navigating in devtools
- Iw :: open devtools in new window

** ~t~ toggle
Lots of options there, just see 'which-key' in qt itself

- s(S)h(H) :: toggle scripts for cur. host (temporatily/permanently (with ~S~) and
  with ~H~ include subdomains / with exact URL)
- ph :: toggle plugins

** ~s~ settings
- Ss :: open settings
- sf :: save config
- sk :: bind key
- sl :: set temp. setting
- ss :: set setting
# - sS :: show settings - UNSET

** ~;~ extended hint mode
- b/f :: open hint in background/foreground(open & go to tab)
- h   :: hover over hint (mouse-over) # what is this kdb doing exactly?
- r/R :: rapid hinting (~R~ in new window)
- i/I :: hint images (~I~ for new tab)
- t   :: *hint inputs* #USEIT
- o/O :: put hinted URL in cmd. line (in new tab)
- y/Y :: yank hinted URL to clipboard/selection
- d   :: download hinted URL

** Modifier commands
- V-{num} :: select tab
- C-TAB :: prev tab
- C-v :: passthrough mode
- C-q :: quick
- C-h :: home
- C-s :: stop loading
- C-M-p :: print

In _insert_ mode:
- C-e :: open editor

In _command_ mode:
- C-p/n :: prev/next history item
- C-d :: delete cur. item

** Free keys
e, z, A C E I Q W X Y
* Modes keybindings [[qute://help/settings.html#bindings.default][#docs]]
** caret
Working =vim= keys: 0/$, gg/G, v/V, w/b/e, h/j/k/l, o

_Other keys:_
- <Space> :: selection-toggle
- <Ctrl-Space> :: selection-drop
- H/J/K/L :: scroll left/down/up/right
- y/Y/RET :: yank selection (~Y~ for -s[election])
- [ / ] :: move-to-start-of-prev/next-block
- { / } :: move-to-end-of-prev/next-block
- c :: mode-enter normal

** command
- C-c:         completion-item-yank
- C-S-c:       completion-item-yank --sel
- C-d:         completion-item-del
- C-n/p:       command-history-next/prev
- C-return:    command-accept --rapid
- C-S-tab:     completion-item-focus prev-category
- C-tab:       completion-item-focus next-category
- S-delete:    completion-item-del
- S-TAB / TAB:       completion-item-focus prev / next

- M-b/f:       rl-backward/forward-word
- M-backspace: rl-backward-kill-word
- C-a/e:       rl-beginning/end-of-line
- C-b/f:       rl-backward/forward-char
- M-d:         rl-kill-word
- C-k:         rl-kill-line
- C-u:         rl-unix-line-discard
- C-w:         rl-unix-word-rubout
- C-y:         rl-yank

* Setup
** Why does it take longer to open a URL in qutebrowser than in chromium?

When opening a URL in an existing instance, the normal qutebrowser Python script
is started and a few PyQt libraries need to be loaded until it is detected that
there is an instance running to which the URL is then passed. This takes some
time. One workaround is to use this script and place it in your $PATH with the
name "qutebrowser". This script passes the URL via a unix socket to qutebrowser
(if its running already) using socat which is much faster and starts a new
qutebrowser if it is not running already.

#+CAPTION open_url_in_instance.sh
#+begin_src shell
#!/bin/sh
# initial idea: Florian Bruhin (The-Compiler)
# author: Thore Bödecker (foxxx0)

_url="$1"
_qb_version='1.0.4'
_proto_version=1
_ipc_socket="${XDG_RUNTIME_DIR}/qutebrowser/ipc-$(echo -n "$USER" | md5sum | cut -d' ' -f1)"
_qute_bin="/usr/bin/qutebrowser"

printf '{"args": ["%s"], "target_arg": null, "version": "%s", "protocol_version": %d, "cwd": "%s"}\n' \
       "${_url}" \
       "${_qb_version}" \
       "${_proto_version}" \
       "${PWD}" | socat -lf /dev/null - UNIX-CONNECT:"${_ipc_socket}" || "$_qute_bin" "$@" &
#+end_src

** Is there a dark mode? How can I filter websites to be darker?

There is a total of four possible approaches to get dark websites:

- The =colors.webpage.preferred_color_scheme= setting tells websites that you
  prefer a light or dark theme. However, this requires websites to ship an
  appropriate dark style sheet. The setting requires a restart and QtWebEngine
  with at least Qt 5.14.
- The ~colors.webpage.darkmode.*~ settings enable the dark mode of the underlying
  Chromium. Those setting require a restart and QtWebEngine with at least Qt
  5.14. It’s unfortunately not possible (due to limitations in Chromium and/or
  QtWebEngine) to change them dynamically or to specify a list of excluded
  websites. There is some remaining hope to allow for this using HTML/CSS
  features, but so far nobody has been able to get things to work (even with
  Chromium) - help welcome!
- The ~content.user_stylesheets~ setting allows specifying a custom CSS such as
  [[https://github.com/alphapapa/solarized-everything-css/][Solarized Everything]]. Despite the name, the repository also offers themes
  other than just Solarized. This approach often yields worse results compared
  to the above ones, but it’s possible to toggle it dynamically using a binding
  like =:bind ,d config-cycle content.user_stylesheets
  ~/path/to/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css ""=
- Finally, qutebrowser’s Greasemonkey support should allow for running a
  [[https://github.com/darkreader/darkreader/issues/926#issuecomment-575893299][stripped down version]] of the Dark Reader extension. This is mostly untested,
  though.

** How do I make copy to clipboard buttons work?

You can :set content.javascript.can_access_clipboard true, or :set -u
some.domain content.javascript.can_access_clipboard true if you want to limit
the setting to some.domain.

* Bookmarks & Quickmarks
*Bookmarks* will always use the title of the website as their name, but with
*quickmarks* you can set your own title.

#+begin_comment
For example, if you bookmark multiple food recipe websites and use :open, you
have to type the title or address of the website.

When using quickmark, you can give them all names, like foodrecipes1,
foodrecipes2 and so on. When you type :open foodrecipes, you will see a list of
all the food recipe sites, without having to remember the exact website title or
address.
#+end_comment

- M :: save current page _or_ specific url as *book-mark*
- gb/B :: load a bookmark
# bookmark-del unset
- m :: save the current page as *quick-mark*
- b/B :: load quick-mark (~B~ in new tab)
# quickmark-add/del unset

- Sb :: book/quick-mark-list --jump
- ~Sq~ :: book/quick-mark-list
* Insert vs Passthrough mode
*Insert* mode has some bindings (like Ctrl-e to open an editor) while *passthrough*
mode only has shift+escape bound. This is because shift+escape is unlikely to be
a useful binding to be passed to a webpage. However, any other keys may be
assigned to leaving passthrough mode instead of shift+escape should this be
desired.
* Commands [[qute://help/commands.html][#docs]]
_Command arguments:_
- ={url}= expands to the URL of the current page
- ={url:pretty}= expands to the URL in decoded format
- ={url:host}, {url:domain}, {url:auth}, {url:scheme}, {url:username},
  {url:password}, {url:host}, {url:port}, {url:path} and {url:query}= expand to
  the respective parts of the current URL
- ={title}= expands to the current page’s title
- ={clipboard}= expands to the clipboard contents
- ={primary}= expands to the primary selection contents

Those variables can be escaped by doubling the braces, e.g. {{url}}. It is
possible to run or bind multiple commands by separating them with ;;.

* Additional info
How can I get No-Script-like behavior? To disable JavaScript by default:

: :set content.javascript.enabled false

** How do I play Youtube videos with mpv?

You can easily add a key binding to play youtube videos inside a real video
player - optionally even with hinting for links:

: :bind ,m spawn mpv {url}
: :bind ,M hint links spawn mpv {hint-url}

The comma prefix is used to make sure user-defined bindings don’t conflict with
the built-in ones.

Note that you might need an additional package (e.g. youtube-dl on Archlinux) to
play web videos with mpv.

There is a very useful script for mpv, which emulates "unique application"
functionality. This way you can add links to the mpv playlist instead of playing
them all at once.

You can find the script here:
https://github.com/mpv-player/mpv/blob/master/TOOLS/umpv

It also works nicely with rapid hints:

: :bind ,m spawn umpv {url}
: :bind ,M hint links spawn umpv {hint-url}
: :bind ;M hint --rapid links spawn umpv {hint-url}

** How do I use spell checking?

Configuring spell checking in qutebrowser depends on the backend in use (see #700 for a more detailed discussion).

For QtWebKit:
1. Install qtwebkit-plugins.
2. Note: with QtWebKit reloaded you may experience some issues. See #10.
3. The dictionary to use is taken from the DICTIONARY environment variable. The
   default is en_US. For example to use Dutch spell check set DICTIONARY to
   nl_NL; you can’t use multiple dictionaries or change them at runtime at the
   moment. (also see the README file for qtwebkit-plugins).
4. Remember to install the hunspell dictionaries if you don’t have them already
   (most distros should have packages for this).

For QtWebEngine:
1. Use dictcli.py script to install dictionaries. Run the script with -h for the parameter description.
2. Set spellcheck.languages to the desired list of languages, e.g.: :set spellcheck.languages "['en-US', 'pl-PL']"

** How do I use Tor with qutebrowser?
Start tor on your machine, and do :set content.proxy socks://localhost:9050/ in
qutebrowser. Note this won’t give you the same amount of fingerprinting
protection that the Tor Browser does, but it’s useful to be able to access
.onion sites.
