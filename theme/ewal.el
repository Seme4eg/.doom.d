;;; ewal.el --- A pywal-based theme generator -*- lexical-binding: t; -*-
;;;
;;; Commentary:
;;; Most of the code is borrowed from https://github.com/cyruseuros/ewal.
;;;

;;; Code:

(require 'cl-lib)
(require 'json)
(require 'doom-themes)

(defgroup ewal nil
  "Ewal options."
  :group 'faces)

(defcustom ewal-json-file "~/.cache/wal/colors.json"
  "Location of ewal theme in json format."
  :type 'string
  :group 'ewal)

(defcustom ewal-ansi-color-name-symbols
  (mapcar #'intern
          (cl-loop for (key . _value)
                   in tty-defined-color-alist
                   collect key))
  "The 8 most universaly supported TTY color names. NOTE: Order matters."
  :type 'list
  :group 'ewal)

(defvar ewal-base-palette nil
  "Current base palette extracted from `ewal-json-file'.")

;;;###autoload
(defun ewal-load-colors (&optional json color-names)
  "Read JSON as the most complete of the cached wal files.
COLOR-NAMES will be associated with the first 8 colors of the
cached wal colors.  COLOR-NAMES are meant to be used in
conjunction with `ewal-ansi-color-name-symbols'.  \"Special\" wal
colors such as \"background\", \"foreground\", and \"cursor\",
tend to \(but do not always\) correspond to the remaining colors
generated by wal. Add those special colors to the returned
alist. Return nil on failure."
  (condition-case nil
      (let* ((json (or json ewal-json-file))
             (json-object-type 'alist)
             (json-array-type 'list)
             (color-names (or color-names ewal-ansi-color-name-symbols))
             (colors (json-read-file json))
             ;; get background, foreground and cursor colors
             (special-colors (alist-get 'special colors))
             ;; get 15 colors (tho only first 9 are unique and will be used)
             (regular-colors (alist-get 'colors colors))
             (regular-color-values (cl-loop for (_key . value)
                                            in regular-colors
                                            collect value))
             (cannonical-colors (cl-pairlis color-names regular-color-values)))
        ;; unofficial pywal comment color (always used as such)
        (cl-pushnew (cons 'comment (nth 8 regular-color-values)) special-colors)
        (setq ewal-base-palette (append special-colors cannonical-colors)))
    (error nil))
  ewal-base-palette)

(defun ewal-get-color (color &optional shade)
  "Get an `ewal' color.
Return SHADE of COLOR. SHADE being a float between 0 and 1."
  (let ((color (alist-get color ewal-base-palette))
        (shade (or shade 0)))
    (if (> shade 0)
        (doom-lighten color shade)
      (doom-darken color (abs shade)))))

;;;###autoload
(defun ewal-evil-cursors-set-colors ()
  "Load ewal colors and apply `ewal-evil-cursors' colors to Emacs."
  (ewal-load-colors)
  (setq
   evil-normal-state-cursor `(,(ewal-get-color 'cursor 0) box)
   evil-insert-state-cursor `(,(ewal-get-color 'green 0) (bar . 2))
   evil-emacs-state-cursor `(,(ewal-get-color 'blue 0) box)
   evil-visual-state-cursor `(,(ewal-get-color 'white -0.3) (hbar . 2))
   evil-motion-state-cursor `(,(ewal-get-color 'magenta 0) box)
   evil-replace-state-cursor `(,(ewal-get-color 'red 0.3) (hbar . 2))))

;;;###autoload
(when (and (boundp 'custom-theme-load-path)
           load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory
                (file-name-directory load-file-name))))

(provide 'ewal)

;;; ewal.el ends here
