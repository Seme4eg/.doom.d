
# Assign "YES" to the variable you want enabled; empty or any other value
# for NO.

CHECK=            # Run tests. May fail, this is developement after all.

CLANG=            # Use clang.

GOLD=             # Use the gold linker.

LTO=              # Enable link-time optimization. Still experimental.

JIT="YES"         # Enable native just-in-time compilation with libgccjit available
# in core. This compiles only performance critical elisp files.
#
# To compile all site-lisp on demand (repos/AUR packages,
# ELPA, MELPA, whatever), add
#    (setq native-comp-deferred-compilation t)
# to your .emacs file.
#
# And to keep the eln cache clean add
#    (setq native-compile-prune-cache t)
# to delete old versions.

AOT="YES"         # Compile all elisp files provided by upstream.

TRAMPOLINES=      # Compile jitted elisp files with trampolines.

PGTK="YES"        # Use native GTK3 build. Supports Wayland, yay! Still
# has some problems if running under Xorg. Remember,
# this is my personal build file!

NOCAIRO=          # Disable here.

XWIDGETS=         # Use GTK+ widgets pulled from webkit2gtk. Usable.

SITTER="YES"      # Use tree-sitter incremental language parsing.

NOGZ="YES"        # Don't compress .el files. (Gain is neglible, IMHO)

################################################################################

################################################################################
pkgname="emacs-git"
pkgver=31.0.50.174857
pkgrel=1
pkgdesc="GNU Emacs. Development master branch."
arch=('x86_64')
url="http://www.gnu.org/software/emacs/"
license=('GPL3')
depends_nox=('gnutls' 'libxml2' 'jansson')
depends=("${depends_nox[@]}" 'harfbuzz' 'libotf')
makedepends=('git')
provides=('emacs')
conflicts=('emacs')
source=("emacs-git::git+https://git.savannah.gnu.org/git/emacs.git")
options=(!strip)
install=emacs-git.install
b2sums=('SKIP')
################################################################################

################################################################################

if [[ $GOLD == "YES" && ! $CLANG == "YES" ]]; then
  export LD=/usr/bin/ld.gold
  export CFLAGS+=" -fuse-ld=gold";
  export CXXFLAGS+=" -fuse-ld=gold";
elif [[ $GOLD == "YES" && $CLANG == "YES" ]]; then
  echo "";
  echo "Clang rather uses its own linker.";
  echo "";
  exit 1;
fi

if [[ $CLANG == "YES" ]]; then
  export CC="/usr/bin/clang" ;
  export CXX="/usr/bin/clang++" ;
  export CPP="/usr/bin/clang -E" ;
  export LD="/usr/bin/lld" ;
  export AR="/usr/bin/llvm-ar" ;
  export AS="/usr/bin/llvm-as" ;
  export CCFLAGS+=' -fuse-ld=lld' ;
  export CXXFLAGS+=' -fuse-ld=lld' ;
  makedepends+=( 'clang' 'lld' 'llvm') ;
fi

if [[ $JIT == "YES" ]]; then
  depends+=( 'libgccjit' );
fi

if [[ $PGTK == "YES" ]]; then
  depends+=( 'gtk3' 'libsm' 'xcb-util' 'libxcb' );
  makedepends+=( 'xorgproto' 'libxi' );
fi

if [[ ! $NOCAIRO == "YES" ]] && [[ ! $PGTK == "YES" ]] ; then
  depends+=( 'cairo' );
fi

if [[ $XWIDGETS == "YES" ]]; then
  depends+=( 'webkit2gtk' );
fi

if [[ $SITTER == "YES" ]]; then
  depends+=( 'tree-sitter' );
fi

depends+=( 'sqlite3' );

################################################################################

################################################################################
pkgver() {
  cd "$srcdir/emacs-git"

  printf "%s.%s" \
    $(grep AC_INIT configure.ac | \
    awk -F',' '{ gsub("[ \\[\\]]","",$2); print $2 }') \
    $(git rev-list --count HEAD)
}

# There is no need to run autogen.sh after first checkout.
# Doing so, breaks incremental compilation.
prepare() {
  cd "$srcdir/emacs-git"
  [[ -x configure ]] || ( ./autogen.sh git && ./autogen.sh autoconf )
  mkdir -p "$srcdir/emacs-git/build"
}

if [[ $CHECK == "YES" ]]; then
  check() {
    cd "$srcdir/emacs-git/build"
    make check
  }
fi

build() {
  cd "$srcdir/emacs-git/build"

  local _conf=(
    --prefix=/usr
    --sysconfdir=/etc
    --libexecdir=/usr/lib
    --localstatedir=/var
    --mandir=/usr/share/man
    --with-gameuser=:games
    --with-modules
    --without-m17n-flt
    # Beware https://debbugs.gnu.org/cgi/bugreport.cgi?bug=25228
    # dconf and gconf break font settings you set in ~/.emacs.
    # If you insist you'll need to read that bug report in *full*.
    # Good luck!
    --without-gconf
  )

  ################################################################################

  ################################################################################

  if [[ $CLANG == "YES" ]]; then
    _conf+=( '--enable-autodepend' );
  fi

  if [[ $LTO == "YES" ]]; then
    _conf+=( '--enable-link-time-optimization' );
  fi

  if [[ $JIT == "YES" ]]; then
    _conf+=( '--with-native-compilation=yes' );
  fi

  if [[ $JIT == "YES" ]] && [[ $AOT == "YES" ]]; then
    _conf+=( '--with-native-compilation=aot' );
  fi

  if [[ ! $JIT == "YES" ]] && [[ ! $AOT == "YES" ]]; then
    _conf+=( '--with-native-compilation=no' );
  fi

  if [[ $PGTK == "YES" ]]; then
    _conf+=( '--with-pgtk' '--without-xaw3d' );
  fi

  if [[ ! $PGTK == "YES" ]]; then
    _conf+=( '--without-gsettings' ) :
  fi

  if [[ $NOCAIRO == "YES" ]]; then
    _conf+=( '--without-cairo' );
  fi

  _conf+=( '--with-sound=no' );

  if [[ $XWIDGETS == "YES" ]]; then
    _conf+=( '--with-xwidgets' );
  fi

  if [[ $SITTER == "YES" ]]; then
    _conf+=( '--with-tree-sitter' );
  fi

  _conf+=( '--without-gpm' );

  if [[ $NOGZ == "YES" ]]; then
    _conf+=( '--without-compress-install' );
  fi

  # ctags/etags may be provided by other packages, e.g, universal-ctags
  _conf+=('--program-transform-name=s/\([ec]tags\)/\1.emacs/')

  ################################################################################

  ################################################################################

  ../configure "${_conf[@]}"

  # Using "make" instead of "make bootstrap" enables incremental
  # compiling. Less time recompiling. Yay! But you may
  # need to use bootstrap sometimes to unbreak the build.
  # Just add it to the command line.
  #
  # Please note that incremental compilation implies that you
  # are reusing your src directory!
  #

  # You may need to run this if 'loaddefs.el' files become corrupt.
  #cd "$srcdir/emacs-git/lisp"
  #make autoloads
  #cd ../build

  if [[ $TRAMPOLINES == "YES" ]] && [[ $JIT == "YES" ]] ; then
    make trampolines;
  else
    make
  fi

}

package() {
  cd "$srcdir/emacs-git/build"

  make DESTDIR="$pkgdir/" install

  # fix user/root permissions on usr/share files
  find "$pkgdir"/usr/share/emacs/ | xargs chown root:root

  # fix permssions on /var/games
  mkdir -p "$pkgdir"/var/games/emacs
  chmod 775 "$pkgdir"/var/games
  chmod 775 "$pkgdir"/var/games/emacs
  chown -R root:games "$pkgdir"/var/games
}

################################################################################
# vim:set ft=bash ts=2 sw=2 et:
