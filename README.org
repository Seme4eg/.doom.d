#+STARTUP: overview hideblocks

* Doom [[file:~/.emacs.d/docs/index.org][#docs-index]] [[file:~/.emacs.d/docs/getting_started.org][#getting-started]] [[file:~/.emacs.d/docs/modules.org][#modules]]
[[https://www.emacswiki.org/emacs/GccEmacs][Installation]]

*IMPORTANT* - [[file:~/.emacs.d/docs/getting_started.org::*Looking up documentation and state from within Emacs][Looking up documentation and HELP]] in *ANY* possible way e.g. /vars,
funcs, faces, *bindings*, keys, keymaps, chars, libs/

config reload - ~spc h r r~

** Doom Theme [[https://github.com/hlissner/emacs-doom-themes][#here]]
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set =doom-theme= or manually load a theme with the
=load-theme= function. This is the default - ~(setq doom-theme 'doom-one)~

- ~SPC h t~   load-theme Load Custom theme named THEME from its file and p...
- ~SPC h r t~ doom/reload-theme Reload the current Emacs theme.

** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src elisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

* Shortcuts
:PROPERTIES:
:Sources: [[file:~/.emacs.d/modules/config/default/+evil-bindings.el][+evil-bindings.el]], [[https://github.com/hlissner/doom-emacs/blob/96bea9e9ad4f3e3412472fa0f26a19d19be66a1a/modules/config/default/%2Bbindings.el][bindings.el]], [[file:~/.emacs.d/modules/editor/evil/config.el::;;; Keybinds][evil/config.el]]
:END:

- ~SPC u~ replaces ~C-u~ as the *universal* argument.
- ~SPC h~ - *help* map
- ~C-S-f~ / ~spc t F~ - *toggle* frame *fullscreen*

Anywhere in =help= / =apropos= buffers:
- ~o~ - *open link* at point
- ~TAB / backtab~ - forward / backward link

[[elisp:(helpful-variable 'minibuffer-mode-map)][minibuffer]] map

** <leader> [[elisp:(helpful-variable 'doom-leader-map)][#keymap]]
- RET :: Jump to *bookmark*
- SPC :: Find *file* in project
- ' :: Resume last *search*
- * :: *Search* for *symbol* in project
- , :: Switch *workspace* buffer
- . :: Find *file*
- / :: search *project*
- ; :: *Eval* expression
- < :: Switch *buffer*
- ` :: Switch to *last buffer*
- a :: *embark* actions
- u :: *universal* argument
- X :: Org Capture
- ~ :: Toggle last *popup*

_Leader mode map links_: *TAB* [[elisp:(helpful-variable 'doom-leader-workspace-map)][workspace]] ([[file:~/.emacs.d/modules/ui/workspaces/README.org::*Commands & Keybindings][doom]] & C-t - new), *b* [[elisp:(helpful-variable 'doom-leader-buffer-map)][buffers]], *f* [[elisp:(helpful-variable 'doom-leader-file-map)][file]], *g* [[elisp:(helpful-variable
 'doom-leader-git-map)][git]], *i* [[elisp:(helpful-variable 'doom-leader-insert-map)][insert]], *n* [[elisp:(helpful-variable 'doom-leader-notes-map)][notes]], *o* [[elisp:(helpful-variable 'doom-leader-open-map)][open]], *p* [[elisp:(helpful-variable 'doom-leader-project-map)][project]], *q* [[elisp:(helpful-variable 'doom-leader-quit/session-map)][quit/session]], *s* [[elisp:(helpful-variable 'doom-leader-search-map)][search]], *t* [[elisp:(helpful-variable 'doom-leader-toggle-map)][toggle]] (+
*s*[pell] checker), *c* [[elisp:(helpful-variable 'doom-leader-code-map)][code]] (+ *J*[ump] to symbol in any workspace), *w* [[elisp:(helpful-variable 'evil-window-map)][window]]

_Mine_: [[elisp:(helpful-variable 'doom-leader-digraph-map)][digraph]], [[elisp:(helpful-variable 'doom-leader-listen-map)][listen]]

** ported from [[https://github.com/tpope/vim-unimpaired][vim-unimpaired]]
?? - where is the keymap for this?

Objects:
- *b*[uffer], *f*[ile], *w*[orkspace], *a*[rg], *c*[omment], *e*[rror], *F*[rame], *h*[eading],
  *m*[ethod] start, *M*[ethod] end
- *d* git gutter hunk / diff
- hl *t*[odo]

- :n ~gt~ / ~gT~  #'+workspace:switch-next / '+workspace:switch-previous

Complementary pairs of mappings:
- :n  ~] SPC~ / ~[ SPC~  #'+evil/insert-newline-below/above
- :n  ~[o~ / ~]o~   #'+evil/insert-newline-above / '+evil/insert-newline-below
- :m  ~]u~ / ~[u~   #'+evil:url-encode / '+evil:url-decode
- :m  ~]y~ / ~[y~   #'+evil:c-string-encode / '+evil:c-string-decode
- :m ~]x~ / ~[x~  #'+web:encode-html-entities / '+web:decode-html-entities)

Custom vim-unmpaired-esque keys:
- :m  ~]#~ / ~[#~   #'+evil/next/prev-preproc-directive
- :n  ~gp~   #'+evil/reselect-paste / '+evil/alt-paste
- :v  "gp" #'+evil/paste-preserve-register
- :n  "gQ" #'+format:region
- :v  "@"  #'+evil:apply-macro
- :nv "g@"    #'+evil:apply-macro
- :nv "gc"    #'evilnc-comment-operator
- :nv "gO"    #'imenu
- :nv "gx"    #'evil-exchange
- :nv "gy"    #'+evil:yank-unindented
- :n  ~g=~ / ~g-~   #'evil-numbers/inc/dec-at-pt
- :v  ~g=~ / ~g-~   #'evil-numbers/inc/dec-at-pt-incremental
- :v  "g+"    #'evil-numbers/inc-at-pt

Other stuff:
- (:after helpful :n "gr" #'helpful-update)
- (:after compile :n "gr" #'recompile)
- (:after dired :n "gr" #'revert-buffer)

** other - text scale, narrowing

- Buffer-local font resizing: ~C-= / C--~ #'text-scale-increase/decrease
- Frame-local font resizing: ~M-C-=/-~  #'doom/increase/decrease-font-size
- ~C-+~   #'doom/reset-font-size

Custom evil keybinds:
- :nv "zn"    #'+evil:narrow-buffer
- :n  "zN"    #'doom/widen-indirectly-narrowed-buffer
- :n  "zx"    #'kill-current-buffer
- :n  "ZX"    #'doom/save-and-kill-buffer

;; don't leave visual mode after shifting:
- :v  "<"     #'+evil/shift-left  ; vnoremap < <gv
- :v  ">"     #'+evil/shift-right  ; vnoremap > >gv

* Packages
** git [[file:~/.emacs.d/modules/tools/magit/README.org::*Plugins][#plugins]] [[elisp:(helpful-variable 'doom-leader-git-map)][#modemap]]
- ~SPC g t~ - [[https://github.com/emacsmirror/git-timemachine][git-timemachine]] - view file =x= time ago;
- ~%~ - [[https://github.com/petervanderdoes/gitflow-avh][gitflow]]

[[https://github.com/rmuslimov/browse-at-remote][browse at remote]] - easiest way to open particular link on
github/gitlab/bitbucket/stash/git.savannah.gnu.org/sourcehut from Emacs:
- ~SPC g Y~ - Copy homepage URL of current project to clipboard.
- ~SPC g y~ - Copy URL to current file (and line if selection is active) to
  clipboard.
- ~SPC g o h~ - Open homepage for current project in browser.
- ~SPC g o o~ - Open URL to current file (and line if selection is active) in
  browser

** evil [[file:~/.emacs.d/modules/editor/evil/README.org::*Features][#features]]
[[file:~/.emacs.d/modules/editor/evil/README.org::*Custom Text Objects][Custom Text Objects]]

- *[[https://github.com/emacs-evil/evil-collection][evil-collection]]* - plugin used as a foundation for flag =+everywhere=, which
  enables evilified keybinds everywhere possible.
- *[[https://github.com/emacs-evil/evil-surround#usage][evil-surround]]* - ~ys~, ~cs~, ~ds~ & [[elisp:(helpful-variable 'evil-surround-mode-map)][modemap]]
- *[[https://github.com/hlissner/evil-multiedit#usage][evil-multiedit]]* - ~M-d / D~ , ~RET~ to exclude, ~C-M-D~ to restore last group. Ex
  command that allows to invoke evil-multiedit with a regular expression -
  =ie[dit]=. There is also a [[https://www.youtube.com/watch?v=zXdT5jY_ui0&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=8][quick vid tut]]. Also ~R~ - #'evil-multiedit-match-all.
- *evil-mc* - ~gz~ prefix. Which-key available, so u can c which kbds r there. Or
  ~SPC h b b~ -> /evil-mc/... Or:
  - ~d/D~ - make and goto next/prev match
  - ~j/k~ - make cursor move next/prev line
  - ~m~   - *make* all cursors
  - ~n/N~ - make and goto next/last cursor
  - ~p/P~ - make and goto prev/first cursor
  - ~q~   - *undo all* cursors
  - ~t~   - *toggle* cursors
  - ~u~   - *undo* cursor
  - ~z~   - *toggle* cursor *here*
  - ~I~   - make cursor in visual selection beg
  - ~A~   - make cursor in visual selection end
- *evil-nerd-commenter* - comment any viable /text objects/ (below). ~gc {motion}~
  Inobvious motions: c / *l*[line], *r*[egion], *\* - comment current line and enter
  insert mode on point
- *[[https://github.com/edkolev/evil-lion#usage][evil-lion]]* - allows to align text by some CHAR; ~gl/L {motion} {char}~
- *evil-numbers* - works like C-a/C-x in vim, but here it is ~g-/g=~
- *evil-exchange* - ~gx {motion}~ - exchange two regions with evil motion

*** [[https://github.com/PythonNut/evil-easymotion][evil-easymotion]] ~gs..~ [[https://www.youtube.com/watch?v=zar4GsOBU0g&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=8][#vid]]
Just ~gs spc~ or ~gs /~

When given a selection type ~?~ to see possible command modifier /(kill-move,
kill-stay, teleport, mark, yank ...)/.

=evilem-motion..= - *#nftbew,  kj gj gk
- -/+   :: previous/next-*line*-first-*non-blank*
- )/(   :: forward/backward-*sentence*-begin
- ][    :: forward-*section*-end
- ]]    :: forward-*section*-begin
- []    :: backward-*section*-end
- [[    :: backward-*section*-begin
- s     :: goto-*char-2*
- g k/j :: previous/next-*visual-line*
- g e/E :: backward-*word/WORD-end*
- a/A   :: forward/backward-*arg*

** Development
[[https://github.com/emacs-lsp/lsp-mode][lsp]] - [[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][tutorial]], ~SPC c l~ - prefix ([[file:~/.emacs.d/modules/tools/lsp/README.org::*Features][lsp doom features]]).

[[https://github.com/hlissner/doom-snippets][snippets and how to use / write them]]
- :i  [C-tab] #'aya-expand
- :nv [C-tab] #'aya-create

*** eval [[file:~/.emacs.d/modules/tools/eval/README.org::*Features][#features]]
instead of opening console in all browser tabs...

- g r :: +eval:region
- M-r, g R :: Evaluate the whole buffer.
- SPC ; :: Evaluate EXPRESSION and pretty-print its value.

- SPC o r :: Does ‘+eval/open-repl’, but in a popup window.
- SPC o R :: Opens (or reopens) the REPL associated with the current major-mode and place
- SPC c s :: Execute the selected region in the REPL.

- SPC c e :: Evaluate the region if it’s active, otherwise evaluate the whole buffer.
- SPC c E :: +eval:replace-region
- M-ESC :, M-: :: Evaluate EXP and print value in the echo area.
- C-x C-e :: Evaluate sexp before point; print value in the echo area.
- C-c C-y, SPC m c t :: Evaluate a time range by computing the difference between start and end.
- C-c = :: Replace the table field value at the cursor by the result of a calculation.

=eros-eval-defun= - Wrapper for ‘eval-defun’ that overlays results.

*** lookup [[file:~/.emacs.d/modules/tools/lookup/README.org::*Features][#features]]
*K* documentation, g *d*[efinition], g *D* - references, g *f*[ile], g
*I*[mplementations], g *A* assignments

- SPC s T (+lookup/synonyms)              - Look up and insert a synonym for the word at poin...
- SPC s t (+lookup/dictionary-definition) - Look up the definition of the word at point (or s...
- SPC s K (+lookup/in-all-docsets)        - TODO
- SPC s k (+lookup/in-docsets)            - Lookup QUERY in dash DOCSETS.
- SPC s O (+lookup/online-select)         - Run ‘+lookup/online’, but always prompt for the p...
- SPC s o (+lookup/online)                - Look up QUERY in the browser using PROVIDER.
- SPC c t (+lookup/type-definition)       - Jump to the type definition of IDENTIFIER (defaul...
- SPC c k (+lookup/documentation)         - Show documentation for IDENTIFIER (defaults to sy...
- SPC c i (+lookup/implementations)       - Jump to the implementations of IDENTIFIER (defaul...
- SPC c D (+lookup/references)            - Show a list of usages of IDENTIFIER (defaults to ...
- SPC c d (+lookup/definition)            - Jump to the definition of IDENTIFIER (defaults to...
- SPC h O (+lookup/online)                - Look up QUERY in the browser using PROVIDER.

*** hide / fold (hideshow mode)
This mode isn't enabled in all prog-modes.

~C-c @~ prefix:
- C-e/c (hs-toggle-hiding) - Toggle hiding/showing of a block.
- C-d/s (hs-hide-block) - Select a block and hide it.  With prefix arg...
- C-t / C-M-h (hs-hide-all) - Hide all top level blocks, displaying only f...
- C-a / C-M-s (hs-show-all) - Show everything then run ‘hs-show-hook’.  Se...
- C-l/h (hs-hide-level) - Hide all blocks ARG levels below this block.

There's also =hide-sublevels= command

*** Language maps
- JS [[file:~/.emacs.d/modules/lang/javascript/README.org::*Commands][#commands]] (js2-mode / tide / js2-refactor / skewer-mode / npm-mode), and
  ~spc h v js map~
- [[elisp:(helpful-variable 'sh-mode-map)][sh-mode-map]]

** Navigation
*** window-select [[file:~/.emacs.d/modules/ui/window-select/README.org::*Description][#description]] ~spc w w~
I'm using ace-window. Kill windows, move them around, split them and more by
using the dispatch keys. (Hit ~?~ to bring up the dispatch menu.)

*** dired [[file:~/.emacs.d/modules/emacs/dired/README.org::*Keybindings][#kbds]], [[elisp:(helpful-variable 'dired-mode-map)][#modemap]]
- ~M~ - change permissions
- ~o~ - sort by modes.
- ~O~ - change the owner.
- ~SPC .~ - create or find a file
- ~*~ - select all directories.
- ~C~ - copy to another window
- ~R~ - move to another window
- ~i~ - edit file/dir name

*** ranger [[https://github.com/ralesi/ranger.el#ranger-key-bindings][#kbds]]
+ *Basic Commands*
  - ? :: show basic commands in the minibuffer
  - du :: show selected files, file size
  - q / ZZ :: close tab or disable (quit) ranger
  - Q / ZQ :: disable (quit) ranger
  - C-r :: refresh ranger buffer
+ *Navigation*. hjkl, gg, G, C-b/f - same.
  - </> :: to previous/next directory
  - gh :: to home directory
  - K/C-u / J/C-d :: scroll ranger window half page up/down
  - C-k/j :: scroll preview window up/down
  - ]/[ :: next/previous parent directory
  - ;M-{ / ;M-} :: previous/next marked file / directory
+ *Search* for a File / Directory
  - f :: search for file / directory
+ *Copy, Rename/Move or Delete*. When the copy command is called by pressing ;C,
  and only a single file or directory is selected. Then a you'll be asked to
  enter a new name. However when it's called with multiple marked files /
  directories, then a you'll be asked for the path to the target directory.
  - ;C :: copy the current/marked file(s) / dir(s)
  - R :: rename/move the current/marked file(s) / dir(s)
  - D :: delete the current/marked file(s) / dir(s)
  - ;d :: flag current file/dir for deletion, and select next
  - ;x :: delete flagged file(s) / dir(s)
+ *Subdirectories*
  - I :: insert subdirectory from selected folder
  - gk/j :: move to prev/next subdirectory
+ *Marking*
  - t :: toggle mark on current file / directory
  - ;m/C-SPC/TAB :: mark current file / dir, and select next
  - ;u :: unmark current file / dir, and select next
  - ;U :: unmark all files
  - v :: invert all marks
  - " :: mark files (regexp)
+ *Sorting*. Capital 2nd letter for reverse sorting
  - on :: name
  - oe :: extension
  - os :: size
  - ot :: modified date/time
  - oc :: created date/time
  - zd :: sort directories first or last
+ *Toggles / Settings*
  - i :: toggle the preview window
  - zh :: toggle hidden files (e.g. dotfiles)
  - zi :: toggle literal / full-text previews
  - zf :: toggle image full-size / fit to window
  - zP :: toggle between full ranger / deer-mode
  - zp :: toggle file details in deer-mode
  - z-/+ :: reduce/increase number of parent windows
+ *Shell*
  - ! :: run shell command on file
  - ;& :: run async shell command on file
  - S :: eshell popup window
+ *Writable Dired Mode*. WDired mode changes the file listings buffer to editable
  text. This makes it easier to rename multiple files. Depending on the width of
  the Emacs frame. It might be useful to toggle off the preview window, by
  pressing: i. Before starting WDired mode. This leaves more room for editing
  the file names.
  - C-c C-e :: start WDired mode
  - C-c C-c/C-x C-s :: finish, rename changed file names, exit WDired mode
  - C-c C-k/C-c ESC :: abort, reverting any changes
  - C-x C-q :: exit, ask to save/revert modified file names
+ *Other*. (create dir, diff, revert, hide)
  - ;+/+ :: create directory
  - ;=/= :: diff: current file and asks for 2nd file
  - ;g :: revert current buffer, with file on disk
  - ;k :: kill (hide) marked lines, C-r to unhide

-----

+ *Bookmark Navigation*. By creating bookmarks with the name ranger-?, where ? can
  be any single key.
  - `/' :: go to bookmark
  - m :: set bookmark
  - um :: delete bookmark
  - B :: show the bookmarks prompt
+ *Tab and History Usage*.
  - gn :: create a new tab
  - gt/T :: go to next/previous tab
  - gc :: close current tab
  - uq :: restore the last closed tab
  - zz :: search through history
  - H/L :: history back/next
+ *Copy and Paste Functionality*.
  - yy :: mark files to copy
  - dd :: mark files to move
  - pp :: paste files in copy ring
  - po :: paste files in copy ring and overwrite existing
  - p? :: show the copy contents
+ *Selected File Actions*
  - w v/s :: Open current file as a split with previously opened window
  - w f :: Open current file in a new frame.
  - w j :: Open current file in ‘other-window’.
  - w e :: Open the current file or dired marked files in external - modifier-cache
*** ibuffer
*Important*: if any kbds doesn't work - call it from =emacs-state=!

+ *Marking*. ~m u U d~ - as expected, others:
  - ‘* c’ - *Change* all OLD marks to NEW marks.
  - ‘* m’ - Mark all *modified* buffers, regardless of whether they have an
    associated file.
  - ‘* M’ - Mark buffers *by major* mode.
  - ‘* u’ - Mark all "*unsaved*" buffers. This means that the buffer is modified,
    and has an associated file.
  - ‘* s’ - Mark all buffers whose name begins and ends with *‘*’*.
  - ‘* e’ - Mark all buffers which have an associated file, but that file
    doesn’t currently exist.
  - * z :: Mark buffers whose associated file is compressed.
  - ‘* r’ - Mark all *read-only* buffers.
  - ‘* /’ - Mark buffers in *‘dired-mode’*.
  - ‘* h’ - Mark buffers in ‘help-mode’, ‘apropos-mode’, etc.
  - . :: Mark buffers which have not been viewed in ‘ibuffer-old-time’ hours.
  - ‘d’ - Mark the buffer at point for *deletion*.
  - ‘% n/m/f/g’ - Mark buffers by name / major mode / filename / content, using
    a *regexp*.
  - % L :: Mark all locked buffers.
  - { / } - backwards/forwards-next-marked
  - t, M :: Toggle modification flag of marked buffers.
  - ~ - *toggle* marks
  - M-DEL, * * :: Unmark all buffers with mark MARK.
  - DEL :: Unmark the buffers in the region, or previous ARG buffers.
+ *Operations* on marked buffers:
  - ‘S’ - Save the marked buffers.
  - ‘A’ / g v - View the marked buffers in the selected frame.
  - ‘H’ - View the marked buffers in another frame.
  - ‘V’ - Revert the marked buffers.
  - ‘T’ - Toggle read-only state of marked buffers.
  - ‘L’ - Toggle lock state of marked buffers.
  - ‘D’ - Kill the marked buffers.
  - ‘M-s a C-s’ - Do incremental search in the marked buffers.
  - ‘M-s a C-M-s’ - Isearch for regexp in the marked buffers.
  - ‘r’ - Replace by regexp in each of the marked buffers.
  - <normal-state> R           do-rename-uniquely
  - ‘Q’ - Query replace in each of the marked buffers.
  - ‘I’ - As above, with a regular expression.
  - ‘P’ - Print the marked buffers.
  - ‘O’ - List lines in all marked buffers which match a given regexp (like the
    function ‘occur’).
  - M-s a C-o, O :: Uses ‘pdf-occur-search’, if appropriate.
  - ‘X’ - Pipe the contents of the marked buffers to a shell command.
  - ‘N’ - Replace the contents of the marked buffers with the output of a shell
  - !, F :: Run shell command COMMAND separately on files of marked buffers.
  - | :: Pipe the contents of each marked buffer to shell command COMMAND.
      command.
  - ‘E’ - Evaluate a form in each of the marked buffers. This is a very flexible
    command. For example, if you want to make all of the marked buffers
    read-only, try using (read-only-mode 1) as the input form.
  - ‘W’ - As above, but view each buffer while the form is evaluated.
  - ‘k’ - Remove the marked lines from the *Ibuffer* buffer, but don’t kill the
    associated buffer.
  - ‘x’ - Kill all buffers marked for deletion.
+ *Filtering* (call from =emacs-state=):
  - ‘/ SPC’ - Select and apply filter chosen by completion.
  - ‘/ RET’ - Add a filter by any major mode.
  - ‘/ m’ - Add a filter by a major mode now in use.
  - ‘/ M’ - Add a filter by derived mode.
  - ‘/ n’ - Add a filter by buffer name.
  - ‘/ c’ - Add a filter by buffer content.
  - ‘/ b’ - Add a filter by basename.
  - ‘/ F’ - Add a filter by directory name.
  - ‘/ f’ - Add a filter by filename.
  - ‘/ .’ - Add a filter by file extension.
  - ‘/ i’ - Add a filter by modified buffers.
  - ‘/ e’ - Add a filter by an arbitrary Lisp predicate.
  - ‘/ >’ - Add a filter by buffer size.
  - ‘/ <’ - Add a filter by buffer size.
  - ‘/ *’ - Add a filter by special buffers.
  - ‘/ v’ - Add a filter by buffers visiting files.
  - ‘/ s’ - *Save* the current *filters* with a name.
  - ‘/ r’ - *Switch* to previously *saved* filters.
  - ‘/ a’ - *Add saved* filters to current filters.
  - ‘/ &’ - Replace the top two filters with their logical *AND*.
  - ‘/ |’ - Replace the top two filters with their logical *OR*.
  - ‘/ p’ - *Remove* the top filter. (like /pop/)
  - ‘/ !’ - Invert the logical sense of the top filter.
  - ‘/ d’ - Break down the topmost filter.
  - ‘/ /’ - *Remove all* filtering currently in effect.
+ *Filter group*:
  - ‘/ g’ - *Create* filter group from filters.
  - ‘/ P’ - *Remove* top filter group.
  - ‘TAB / C-j / M-n / ]]’ - Move to the *next* filter group.
  - ‘M-p / C-k / [[’ - Move to the *previous* filter group.
  - ‘/ \’ - *Remove all* active filter groups.
  - ‘/ S’ - *Save* the current groups with a name.
  - ‘/ R’ - *Restore* previously *saved* groups.
  - ‘/ X’ - *Delete* previously *saved* groups.
  - g x :: *Kill* the filter group *at point*.
  - M-j :: Move point to the filter group whose name is NAME.
  - s D :: decompose-filter-group
+ *Sorting*:
  - ‘,’ - Rotate between the various sorting modes.
  - ‘o i’ - Reverse the current sorting order.
  - ‘o a’ - Sort the buffers lexicographically.
  - ‘o f’ - Sort the buffers by the file name.
  - ‘o v’ - Sort the buffers by last viewing time.
  - ‘o s’ - Sort the buffers by size.
  - ‘o m’ - Sort the buffers by major mode.
+ Other commands:
  - ‘g’ - Regenerate the list of all buffers. Prefix arg means to toggle whether buffers that match ‘ibuffer-maybe-show-predicates’ should be displayed.
  - ‘C-c C-a’ - Toggle automatic updates.
  - ‘`’ - Change the current display format.
  - M-g, J :: Move point to the buffer whose name is NAME.
  - ‘SPC’ - Move point to the next line.
  - ‘C-p’ - Move point to the previous line.
  - ‘h’ - This help.
  - ‘=’ - View the differences between this buffer and its associated file.
  - <normal-state> g o         visit-buffer-other-window
  - <normal-state> C-o         visit-buffer-other-window-noselect
  - C-x 5 RET :: Visit the buffer on this line in another frame.
  - M-o :: Visit the buffer on this line, and delete other windows.
  - C-t :: Visit the tags table in the buffer on this line.  See ‘visit-tags-table’.
  - X :: Bury the buffer on this line.
  - y b :: Copy buffer names of marked (or next ARG) buffers into the kill ring.
  - y f :: Copy filenames of marked (or next ARG) buffers into the kill ring.
  - - :: Add REGEXP to ‘ibuffer-tmp-hide-regexps’.
  - + :: Add REGEXP to ‘ibuffer-tmp-show-regexps’.
  - g v :: do-view
  - C-x v, g V :: As ‘ibuffer-do-view’, but split windows horizontally.

**** Filtering
Each Ibuffer buffer has its *own stack* of active filters. For example, you can
create an Ibuffer buffer displaying only ‘emacs-lisp-mode’ buffers via ‘/ RET
emacs-lisp-mode RET’.

You can also *combine* filters. For example, suppose you only want to see buffers
in ‘emacs-lisp-mode’, whose names begin with "gnus":

: / RET emacs-lisp-mode RET
: / n ^gnus RET

Additionally, you can *OR* the top two filters together with ~/ |~ (*AND* with ~/ &~)

Filters can also be saved and restored using mnemonic names: see the
functions ‘ibuffer-save-filters’ and ‘ibuffer-switch-to-saved-filters’.

**** Filter Groups
A filter group is basically a named group of buffers which
match a filter, which are displayed together in an Ibuffer buffer.

Just like filters themselves, filter *groups act as a stack*. The first filter
group is used. The filter groups are displayed in this order of *precedence*.

You may *rearrange* filter groups by using the usual pair ‘C-k’ and ‘C-y’. Yanked
groups will be inserted before the group at point.

** Completion
~M-/~ - #'dabbrev-expand - Expand previous word "dynamically".

- vertico [[file:~/.emacs.d/modules/completion/vertico/README.org::*Vertico keybindings][#kbds]] [[elisp:(helpful-variable 'vertico-map)][#modemap]], also check [[file:~/.emacs.d/modules/completion/vertico/README.org::*Orderless filtering][Orderless filtering]] , ~C-SPC~ embark-preview
- syntax [[file:~/.emacs.d/modules/checkers/syntax/README.org::*Features][#features]] [[elisp:(helpful-variable 'flycheck-mode-map)][#modemap]]

*** company [[file:~/.emacs.d/modules/completion/company/README.org::*Code completion][#Code completion]] ~C-SPC~ to trigger completion.
~C-SPC/@~ - (cmds! (not (minibufferp)) #'company-complete-common)

- [[elisp:(helpful-variable 'company-active-map)][company-active-map]], "C-w" doesn't interfere with `evil-delete-backward-word'
- [[elisp:(helpful-variable 'company-search-map)][company-search-map]] (~C-s~)

Omni-completion :prefix "C-x":
- :i "C-l"    #'+company/whole-lines
- :i "C-k"    #'+company/dict-or-keywords
- :i "C-f"    #'company-files
- :i "C-]"    #'company-etags
- :i "s"      #'company-ispell
- :i "C-s"    #'company-yasnippet
- :i "C-o"    #'company-capf
- :i "C-n"    #'+company/dabbrev
- :i "C-p"    #'+company/dabbrev-code-previous

*** spell (dictionary) [[file:~/.emacs.d/modules/checkers/spell/README.org::+TITLE: checkers/spell][#source]] [[https://gitlab.com/ideasman42/emacs-spell-fu][spell-fu]]
Flycheck might be slow and won't be running automatically as of emacs 28, that's
why i use default option - /spell-fu/.

Dictionary is set by =ispell-dictionary= variable. Can be changed locally with the
function =ispell-change-dictionary=.

For now i removed spell from my init & config files cuz don't need those.
Settings i used (besides having /aspell, aspell-en, aspell-ru/ installed on pc):
#+begin_src elisp
(after! spell-fu
  (setq spell-fu-idle-delay 0.5))  ; default is 0.25
(setq-default ispell-dictionary "en")
#+end_src

Evil already defines 'z=' to `ispell-word' = correct word at point

- :n  "zg"   #'+spell/add-word
- :n  "zw"   #'+spell/remove-word
- :m  "[s"   #'+spell/previous-error
- :m  "]s"   #'+spell/next-error)

** Info [[file:~/.emacs.d/.local/straight/repos/evil-collection/modes/info/evil-collection-info.el][evil-collection-info.el]]
#+begin_comment
Info files are created from Texinfo source files. You can use the same source
file to make a printed manual or produce other formats, such as HTML and
DocBook.

The ‘makeinfo’ command converts a Texinfo file into an Info file;
‘texinfo-format-region’ and ‘texinfo-format-buffer’ are GNU Emacs functions that
do the same.
#+end_comment

~SPC h i~ (info) - Enter Info, the documentation browser. _Numeric prefix_ to this
command switches / creates Info buffer with that number. (They r *independent*)

~M-h~ (Info-help) - Enter the Info tutorial.

~g ?~ (Info-summary) - Display a brief summary of all Info commands.

_Basics:_
- ~g k/j~ or ~C-k/j~ (Info-prev/next) - Go to the "previous/next" node, but C-k/j
  also counts nesting.
- ~g [ / ]~ or ~TAB / S-TAB~ (Info-prev/next-reference) - Move cursor to the
  previous/next cross-reference (link)
- ~g m~ (Info-menu) - Go to the node pointed to by the menu item.
- ~u~ (Info-up) - Go to the superior node of this node.
- ~C-o/t~ (Info-history-back) - Go back in the history
- ~TAB~ (Info-history-forward) - Go forward in the history (_doesn't work_)
- ~i~ (*Info-index*) - You can get to the index from the main menu of the file with
  the ‘m’ command and the name of the index node; then you can use the ‘m’
  command again in the index node to go to the node that describes the topic you
  want. ~i~ is just a short-cut, which does all of that for u. It searches the
  index for a given topic (a string) and goes to the node which is listed in the
  index for that topic. *Very powerful command, lets u get info on any
  'mode'-related thing*.
- ~I~ (Info-virtual-index) - behaves like ‘i’, but constructs a virtual info node
  displaying the results of an index search, making it easier to select the one
  you want.
- ~g L~ (Info-history) - Go to a node with a menu of visited nodes.
- ~d~ (Info-directory) - Go to the Info directory node. Which is the first one you
  saw when you entered Info, has a menu which leads (directly or indirectly,
  through other menus)
- ~g t~ (Info-top-node) - command moves to the ‘Top’ node of the *manual*.
- ~g T~ (Info-toc) - Go to a node with table of contents of the c...

_Advanced:_
- ~a~ (info-apropos) - If you aren’t sure which manual documents the topic you are
  looking for. It prompts for a string and then looks up that string in *all* the
  indices of *all* the Info documents installed on your system.
- ~g G~ (Info-goto-node) - If you know a node’s name, you can go there using this
  command. ~gTop<RET>~ is same as ~g t~ (info-top-node).
- ~g 1..9~ (Info-nth-menu-item) - Go to the node of the Nth menu item. They are
  short for the ‘m’ command together with a name of a menu subtopic.
- ~M-n~ (clone-buffer) - creates a new *independent* Info buffer. The new buffer
  starts out as an exact copy of the old one, but you will be able to move
  independently between nodes in the two buffers.
- ~SPC h 4 i~ (info-other-window) - Like ‘info’ but show the Info buffer in
  anoter window

#+CAPTION: produce new Info buffers
#+begin_comment
In Emacs Info, you can also produce new Info buffers by giving a numeric prefix
argument to the ‘m’ and ‘g’ commands. ‘C-u m’ and ‘C-u g’ go to a new node in
exactly the same way that ‘m’ and ‘g’ do, but they do so in a new Info buffer
which they select in another window.

Or use a numeric prefix argument for the ‘C-h i’ command (‘info’) which switches
to the Info buffer with that number. Thus, ‘C-u 2 C-h i’ switches to the buffer
‘*info*<2>’, creating it if necessary.
#+end_comment

To look up Info-mode _variables_ go ~SPC h i~ -> ~g m~ -> Info -> ~g G Variables~

- ~f~ :: following cross reference (part 1.7 of ~M-h~)
- f? :: list all references in cur. node
** Embark [[https://github.com/oantolin/embark/wiki/Default-Actions][#default-actions]]
*Emacs Mini-Buffer Actions Rooted in Keymaps*

Thing that allows u to:
- Insert a minibuffer candidate into the buffer (~i~)
- Visit a package’s URL from the minibuffer (~C-h p {package}~ -> ~spc ; u~)
- Add a keybinding for a command name from anywhere it appears: ~spc a~ on
  =dired-jump= -> l (set local kbd (globally is also there))
- Export buffer candidates to ibuffer (~spc ,~ -> ~spc ; E~), same with files &
  variables.
- Export grep or line candidates to a grep buffer: ~{any seach cmd}~ ->
  =embark-export= (~E~) -> ~C-c C-f~ to turn on 'follow on point'

*** Acting on targets
This package provides a sort of right-click contextual menu for Emacs, accessed
through the ‘embark-act’ command (which you should bind to a convenient key),
offering you relevant _actions_ to use on a _target_ determined by the context:

- In the *minibuffer*, the target is the current top completion candidate.
- In the *Completions* buffer the target is the completion at point.
- In a *regular buffer*, the target is the region if active, or else the file,
  symbol, URL, s-expression or defun at point.

Multiple *targets* can be present at the same location and you can *cycle* between
them by repeating the ‘embark-act’ key binding.

Embark behaviors are configurable via the variable =embark-indicators=. Instead
of selecting an action via its key binding, you can select it by name with
completion by typing ‘C-h’ after ‘embark-act’.

*Configuring* which actions are offered for a *type*: =embark-keymap-alist=
associates target types with variables containing keymaps, and those keymaps
containing bindings for the actions.

#+NAME: For example
#+begin_comment
In the default configuration the type ‘file’ is associated with the symbol
‘embark-file-map’. That symbol names a keymap with single-letter key bindings
for common Emacs file commands, for instance ‘c’ is bound to ‘copy-file’. This
means that if you are in the minibuffer after running a command that prompts for
a file, such as ‘find-file’ or ‘rename-file’, you can copy a file by running
‘embark-act’ and then pressing ‘c’.
#+end_comment

These action keymaps are very convenient but not strictly necessary when using
‘embark-act’: you can use any command that reads from the minibuffer as an
action and the target of the action will be inserted at the first minibuffer
prompt. After running ‘embark-act’ all of your key bindings and even
=‘execute-extended-command’= can be used to run a command. _For example_, if you
want to replace all occurrences of the symbol at point, just use ‘M-%’ as the
action, there is no need to bind ‘query-replace’ in one of Embark’s keymaps.

The *actions* in =embark-general-map= are available always. By *default* this includes
*bindings* to save the current candidate in the kill ring and to insert the
current candidate in the target buffer.

Emacs commands often do not set useful category metadata so the Marginalia
(https://github.com/minad/marginalia) package, which supplies this missing
metadata, is highly recommended for use with Embark.

~embark-act RET~ usually runs the *default* action on target (in minibuffer - first
candidate, in buffer - default action bound to 'RET' keymap (like /browse-url/ on
links))

~embark-dwim~ runs *default* action for 1st target found (handy in non-minibuffers).
Default behaviour is:
- Open the file at point.
- Open the URL at point in a web browser (using the ‘browse-url’ command).
- Compose a new email to the email address at point.
- In an Emacs Lisp buffer, if point is on an opening parenthesis or right after
  a closing one, it will evaluate the corresponding expression.
- Go to the definition of an Emacs Lisp function, variable or macro at point.
- Find the file corresponding to an Emacs Lisp library at point.

In *Embark Actions* buffer (embark's /Which-key/) you can scroll that buffer with
_usual_ ~C-M-(S-)v~ - =scroll-other-window(-down)=

By default Doom uses =embark-which-key-indicator=, but embark comes with its own
indicators, which u can look up in embark's /Info -> 3.1 Showing ../

~C-h~ =embark-help-key= (after =embark-act=) - will prompt you for the name of an
action with completion (but feel free to enter a command that is not among the
offered candidates!). You can press ‘embark-keymap-prompter-key’, which is ‘@’
by default, at the prompt and then one of the key bindings to enter the name of
the corresponding action.

*** Working with sets of possible targets (~collect~ / ~export~)
- ~S~ =embark-collect-snapshot= - produces a buffer listing all the current
  candidates.
- ~E~ =embark-export= - command tries to open a buffer in an appropriate major mode
  for the set of candidates. If the candidates are files export produces a Dired
  buffer; if they are buffers, you get an Ibuffer buffer; and if they are
  packages you get a buffer in package menu mode.

#+NAME: embark-consult (for wgrep mostly)
#+begin_comment
If you use the grepping commands from the [[https://github.com/minad/consult/][Consult]] package, ‘consult-grep’,
‘consult-git-grep’ or ‘consult-ripgrep’, then you’ll probably want to install
and load the ‘embark-consult’ package, which adds support for exporting a list
of grep results to an honest grep-mode buffer, on which you can even use wgrep
if you wish.
#+end_comment

#+NAME: collect vs export (prefer 'export' over 'collect')
#+begin_comment
Prefer ‘embark-export’ since when an exporter to a special major mode is
available for a given type of target, it will be more featureful than an Embark
collect buffer, and if no such exporter is configured the ‘embark-export’
command falls back to the generic ‘embark-collect-snapshot’.
#+end_comment

=embark-collect-live= useless with /vertico/.

*** Switching command without losing input | ~embark-become~
~B~ =embark-become= - change current command keeping your input (like
/switch-to-buffer/ -> /find-file/)

** Utility
- [[https://github.com/tecosaur/emacs-everywhere#usage][everywhere]] - Invoke Emacs everywhere
- [[file:~/.emacs.d/modules/ui/popup/README.org::*Commands][popup]]:
  + C-~ (+popup/raise) - Raise the current popup window into a regular window
  + C-` (+popup/toggle) - Toggle any visible popups.
  + SPC ~  (+popup/toggle) - Toggle any visible popups.
  + C-x p  (+popup/other) - Cycle through popup windows, like ‘other-window’....
- [[file:~/.emacs.d/modules/tools/editorconfig/README.org::*Features][editorconfig]]
- better-jumper, [[https://github.com/gilbertw1/better-jumper#comparison-with-evil-jump][here]] is it's comparison to evil-jump. Basically its ~C-i / o~
  functionality. But if u type ~M-x better-..~ u will get all its possible
  functions, among which is =better-jumper-jump-newest=, which doesn't have kbd,
  but jus keep it in mind. Nothing else interesting there.
- =evil-quick-diff= - used to diff and edit two separate blocks of text.
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/tools/pass/README.org#description][pass]] - ~M-x pass~; view [[https://git.zx2c4.com/password-store/about/][pass man page]]
- [[https://github.com/hlissner/doom-emacs/blob/develop/modules/term/vterm/README.org][vterm]] - new terminal
- [[https://github.com/emacsmirror/undo-tree/blob/master/undo-tree.el][undo-tree]] (shortcuts bit below in doc.)
- [[https://www.emacswiki.org/emacs/AproposMode][apropos-mode]] - obtain information about the Emacs entities that match a
  regular expression (regexp) or keywords that you type.
- Nov [[https://depp.brause.cc/nov.el/][#docs]] [[file:~/.emacs.d/.local/straight/repos/evil-collection/modes/nov/evil-collection-nov.el][evil-collectoin-nov.el]]

*** EWW - Emacs Web Wowser
[[file:~/.emacs.d/.local/straight/repos/evil-collection/modes/eww/evil-collection-eww.el][evil-collection-eww.el]] - bookmarks, buffers list, open, external ...

- M-RET :: *open* URL (or same page if not on URL) at point in *new buffer*
- g h :: list browsing *history*. The history is lost when EWW is quit. If you
  want to remember websites - use bookmarks. History limit is stored in
  =eww-history-limit= var.
- <tab> / <backtab> :: shr *next / previous link*
- g h :: list browsing *history*. The history is lost when EWW is quit. If you
  want to remember websites - use bookmarks. History limit is stored in
  =eww-history-limit= var.
- r/R (eww-readable) :: attampt to determine which part of the doc contains the
  'readable' text, and will only display this part. This usually gets rid of
  menus and the like.

M-C - toggle whether to use HTML-specified colors or not. (=shr-use-colors=
variable)

Hotkeys below are the default hotkeys. They r shadowed, but relevant if u enter
'insert mode' in eww buffer (or if called from =emacs-state=):
#+begin_comment
TAB (shr-next-link)
C (url-cookie-list)
D (eww-toggle-paragraph-direction)
E (eww-set-character-encoding)
G (eww)
H (eww-list-histories)
S (eww-list-buffers)
b (eww-add-bookmark)
g (eww-reload)
h (describe-mode)
l/n (eww-back/next-url)
p/r (eww-previous/forward-url)
s (eww-switch-to-buffer)
t (eww-top-url)
v (eww-view-source)
w (eww-copy-page-url) - copy current page's url to kill ring
DEL (scroll-down-command)
<delete> (scroll-down-command)
#+end_comment

_Commands_:
- eww-open-file :: open a local HTML file

*** Xwidget ~spc o x~
Inside the web browser, you can type ‘e’ to enter “edit mode”, where self
inserting characters are passed to the WebKit widget, or ‘C-s’ to perform
incremental search on the contents of the WebKit widget.

In [[https://github.com/jave/xwidget-emacs#webkit-hints][hints section]] author sais that he uses =ffap= to go to links, but for me it
only renders link on cur. page.

*VIM*: ~gg, G, [num]hjkl, +=-, C-d/f, C-u/b~

- g u :: Ask xwidget-webkit to browse URL.
- y :: Get the webkit selection and put it on the ‘kill-ring’.
- H/L :: Go back to previous/next URL in xwidget webkit buffer.
- C-s :: Minor mode for performing incremental search inside WebKit buffers.
  Variable: Non-nil if Xwidget-Webkit-Isearch mode is enabled.
- R :: Reload current URL.

"shadowed" ones:
- RET :: xwidget-webkit-insert-string
- a   :: xwidget-webkit-adjust-size-dispatch
- e   :: xwidget-webkit-edit-mode
- w   :: xwidget-webkit-current-url
- H   :: xwidget-webkit-browse-history
- g   :: revert-buffer
- w   :: xwidget-webkit-current-url
*** IRC [[file:~/.emacs.d/modules/app/irc/README.org::*An IRC Client in Emacs][#kbds]] ~SPC m~
#+NAME: what is IRC
#+begin_comment
[[https://github.com/emacs-circe/circe/wiki/Introduction-to-IRC][Introduction to IRC]]

Contrary to most Instant Messenger (IM) systems, users usually don’t
connect to a central server.  Instead, users connect to a random server
in a network, and servers relay messages from one to the next.

Here’s a typical example:

When you connect to the Libera.Chat network (‘https://libera.chat’),
you point your IRC client at the server ‘irc.libera.chat’.  That server
will redirect your client to a random server on the network, such as
‘zirconium.libera.chat’.

Once you’re connected, you can send messages to all other users
connected to the same network, and you can join all channels on the same
network.  You might join the ‘#emacs’ and the ‘#rcirc’ channels, for
example.  (Typically, channel names begin with a hash character.)

Once you have joined a channel, anything you type will be broadcast
to all the other users on the same channel.
#+end_comment

- Channel activity is tracked in the mode line. C-c C-SPC cycles through
  channels with activity, and back to the buffer you came from.
- A fools list complements the ignore list. Lines from fools are by default
  hidden, but can be shown temporarily with a keyboard command. This makes it
  possible to ignore some annoying person, but still figure out what is going on
  in case someone starts talking with them.
- Both the ignore and fool features do not only ignore people, but try to be
  smart about also ignoring those who address the ignored person.

For private messages, Circe creates a query buffer, which is dedicated to the
conversation with a single other individual. Circe tries to keep track of the
nick of that individual. - What is the difference from DCC?

[[https://github.com/emacs-circe/circe/wiki/Configuration][Configuration]]

[[https://github.com/emacs-circe/circe/wiki/Using-Circe-with-IRC-bouncers-like-ZNC][Bouncer (znc)]]

**** Commands
- /SAY text :: Say ~text~ to the current target. This is useful to prevent a
  misinterpretation of a slash at the beginning of a line.
- /ME action :: Tell the current channel that you are doing =action=. This is
  usually displayed to others as follows (where =padawan= is your nick): ~/ME
  smiles at the people in the channel.~ -> ~padawan smiles at the people in the
  channel.~
- M-x circe-reconnect :: reconnects current IRC seccion, i.e. ur net died.
- /JOIN channel [key] :: Join =channel=, optionally supplying a =key=. Some
  channels have a keyword set so that only those in the know can join it. This
  is rare, though.
- /PART [reason] :: leave cur. channel. You can give a =reason=, too.
- /NAMES [channel] / C-c C-n :: get a list of people on the cur. channel, or
  possibly on =channel=
- topic [newtext] :: retrieves or sets the topic of the current channel. The
  topic is a (more or less) long line of text, usually announcing important URLs
  or events.
- /CHTOPIC / C-c C-t :: Replace the current input line with a command to set the
  topic as it is at the moment. This is useful if you want to change the topic
  slightly.
- /WL [number] :: Who Left command, useful on =netsplit= & =netmerge=. [[https://github.com/emacs-circe/circe/wiki/Commands#wl-number][#docs]]
- /MSG nick text :: send =nick= a message containing =text=. This is equivalent
  to opening (or switching to) a query buffer for this person, and typing text
  at the prompt.
- /QUERY nick :: Open a query buffer for user =nick=.
- /AWAY [reason], /GAWAY [reason] :: This command sets you =away=, which means
  you're not available for talking at the moment. The reason is told to everyone
  who sends messages to you, or checks your whois information. The =gaway= variant
  does the same, but on all servers you are connected to.
- /BACK :: This command removes any away status. It is equivalent to AWAY
  without any arguments.
- /QUIT [reason], /GQUIT [reason] :: A completely useless command which makes
  you leave IRC. Since this is such a completely incomprehensible thing to do,
  it is very useful to give a =reason= why you did that. =GQUIT= does the same, but
  on all servers you are on.
- /IGNORE [pattern] :: [[https://github.com/emacs-circe/circe/wiki/Commands#ignore-pattern][#docs]]
- /PING nick :: The net being what it is, it is possible that sometimes a
  connection is very slow. How fast someone is receiving your messages can be
  tested with this message.
- /WHOIS nick [nick], /WHOWAS nick :: =WHOIS= returns some information about
  another user. WHOWAS works on nicks that are not on IRC anymore, though it
  returns less information.
- /WHOAMI :: When you don't see your own nick in messages you send, it is
  sometimes quite nice to be remembered who you are again. This command does a
  WHOIS on yourself.
- /CTCP nick command arguments :: CTCP is the [[https://www.irchelp.org/protocol/ctcpspec.html][Client-To-Client Protocol]] used on
  IRC. If you want to test it, try to send yourself a CTCP message. Possible
  commands are obtained from CLIENTINFO command (no args)
- /QUOTE text :: Sometimes it is desirable for some people to send IRC commands
  themselves. The QUOTE command just takes its argument and passes it unmodified
  to the IRC server.
- /SV :: tells the current target the version of Circe and Emacs
  you are using. Besides being useful in bragging contests, this also helps in
  debugging problems.
*** Pdf-tools
??? Virtual - Use a collection of documents as if it were one, big single PDF.

/Image-mode/ keymap might also be somehow useful in pdf-mode?

=pdf-virtual-edit-mode= - for editing pdfs, but something might b wront with
encoding.

Like in *VIM*: gg/G, hjkl, nN, /?, m[arking] and jumping to marks (')

+ Navigation
  - C-x ], ] ], g j, C-j :: *next* page
  - C-x [, [ [, g k, C-k :: *previous* page
  - C-f, C-d :: Scroll *page up* ARG lines if possible, else go to the next page.
  - C-b, C-u, <delete> :: Scroll *page down* ARG lines if possible, else go
    to the previous page.
  - \ </> :: (call from =emacs-state= (~\~) cuz there is no evil kbds) *top / bottom*
    of cur. page
  - M-s o :: *Occur* (list all lines containing a phrase) (/doesn't work/)
  - F :: pick a *link* and *jump*
  - f :: incremental *search in links*
  - o :: Display *outline* and *jump* to section
  - M-g l, g l :: *Go to* the page corresponding to *LABEL*.
  - M-g M-g, M-g g :: *Go to PAGE*
  - \ B / N :: (.. from =emacs-state=) *History* back / forward
+ Display
  - =, z i, +, = :: *Enlarge* PDF by FACTOR.
  - z o, - :: *Shrink* PDF by FACTOR.
  - z 0, 0 :: *Reset* zoom
  - H / W / P :: *Fit* Height / Width / Page
  - s b :: Trim *margins* (set slice to bounding box)
  - s r :: Reset margins
+ Look
  - C-c C-d, z d :: *dark* background
  - C-c C-r m, z m :: Apply a *color-filter* appropriate for past *midnight* reading.
  - C-c C-r t :: *Synchronize* color filter with the present Emacs *theme*.
  - C-c C-r p, z p :: Display the PDF as it would be printed.
+ Annotations (if any of kbds below *don't* work - use ~\~)
  - C-c C-a l :: *List* annotations
  - C-c C-a D :: *Delete* annotation A.
  - C-c C-a h/m/s/o/t/u :: Add a new highlight / markup / squiggly / strike-out
    / text / underline annotation in the selected window.
  - SPACE :: Jump to Annotations from List
  - d :: Mark Annotation for Deletion
  - x :: Delete Marked Annotations
  - u :: Unmark Annotations
  - q :: Close Annotation List
+ Quitting
  - Q / Z Q :: kill-this-buffer
  - Z Z / q :: quit-window
  - q       :: kill-current-buffer
+ Other
  - $ :: image-eol
  - C-c C-p :: pdf-misc-print-document
  - C-c <tab>, C-c TAB :: *Create* a PNG *image* of REGIONS.
  - M-w, S-<delete>, <visual-state> y :: *Copy region* to the ‘kill-ring’.
  - C-x h :: *Mark* the whole *page*.
  - C-c C-a a :: List all attachments in a dired buffer.
  - C-c C-g :: jump to PDF location from source (/doesn't work/)
* unused kbds
S-q

~SPC~ .. d, e, j, k, r, v, y, z
