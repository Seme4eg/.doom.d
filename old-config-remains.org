* Eshell | [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][reference]]
*Eshell kbds:*
~M-RET~ - can be used to accumulate further commands while a command is
currently running. Since all input is passed to the subprocess being
executed, there is no automatic input queueing as there is with other
shells.
~C-c C-t~ - truncate the buffer if it grows too large.
~C-c C-r~ - move point to the beginning of the output of the last
command. With a prefix argument, it will narrow to view only that
output.
~C-c C-o~ - delete the output from the last command.
~C-c C-f~ - move forward a complete shell argument.
~C-c C-b~ - move backward a complete shell argument.

** Better command line history
On [[https://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/][this discussion]] a little gem for using IDO to search back through the history, instead of M-R to display
the history in a selectable buffer.

Also, while M-p cycles through the history, M-P actually moves up the history in the buffer (easier than C-c p
and C-c n?):

Since eshellâ€™s history often gets confused with blank lines in the output, we can fix that with a better
replacement functions pegged to the eshell-prompt-regexp string:

#+BEGIN_SRC emacs-lisp
  (defun eshell-next-prompt (n)
    "Move to end of Nth next prompt in the buffer. See `eshell-prompt-regexp'."
    (interactive "p")
    (re-search-forward eshell-prompt-regexp nil t n)
    (when eshell-highlight-prompt
      (while (not (get-text-property (line-beginning-position) 'read-only) )
        (re-search-forward eshell-prompt-regexp nil t n)))
    (eshell-skip-prompt))

  (defun eshell-previous-prompt (n)
    "Move to end of Nth previous prompt in the buffer. See `eshell-prompt-regexp'."
    (interactive "p")
    (backward-char)
    (eshell-next-prompt (- n)))

  (defun eshell-insert-history ()
    "Displays the eshell history to select and insert back into your eshell."
    (interactive)
    (insert (ido-completing-read "Eshell history: "
                                 (delete-dups
                                  (ring-elements eshell-history-ring)))))

  (add-hook 'eshell-mode-hook (lambda ()
      (define-key eshell-mode-map (kbd "M-S-P") 'eshell-previous-prompt)
      (define-key eshell-mode-map (kbd "M-S-N") 'eshell-next-prompt)
      (define-key eshell-mode-map (kbd "M-r") 'eshell-insert-history)))
#+END_SRC

* Development
** JS settings
*** tern
The [[https://ternjs.net/doc/manual.html#emacs][Tern]] project is a JavaScript analyzer that can be used to improve the JavaScript integration with editors
like Emacs.

to install packages globally withoug /EACCESS/ error go [[https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally][here]], then ~npm i -g tern~

~,tf~ - Jump to the definition of the thing under the cursor.
~,tp~ - Brings you back to last place you were when you pressed M-..
~C-c C-r~ - Rename the variable under the cursor.
~C-c C-c~ - Find the type of the thing under the cursor.
~C-c C-d~ - Find docs of the thing under the cursor. Press again to open the associated URL (if any).

> alternative to tern (but for different langs) - *dumb jump*

#+BEGIN_SRC emacs-lisp
  (use-package tern
     :init
     (add-to-list 'load-path "~/.npm-global/lib/node_modules/tern/emacs/")
     (autoload 'tern-mode "tern.el" nil t)
     (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     (evil-leader/set-key
       "th" 'tern-highlight-refs
       "tf" 'tern-find-definition
       "tn" 'tern-find-definition-by-name
       "tp" 'tern-pop-find-definition))
#+END_SRC

** color-identifiers-mode
#+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode
    :hook prog-mode)
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all) ;; ur custom snippets won't work untill u run this
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+END_SRC


* Set up -->
** G[g]tags | [[https://github.com/leoliu/ggtags][github]]

[[https://github.com/howardabrams/dot-files/blob/master/emacs.org#tag-support][another option]]

#+BEGIN_SRC emacs-lisp
  ;; == trying to make ggtags work ==
  ;; (use-package ggtags
  ;;   :hook (prog-mode . ggtags-mode))


  ;; (when (and (maybe-require-package 'gtags)
  ;;            (maybe-require-package 'bpr))
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window)))
  ;;
  ;; (provide 'init-gtags)

  ;; === or

  ;; (use-package gtags
  ;;   :init
  ;;   ;; Bind some useful keys in the gtags select buffer that evil overrides.
  ;;   (add-hook 'gtags-select-mode-hook
  ;;             (lambda ()
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
  ;;               (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window))))

  ;; === functions:
  ;;
  ;; (defun gtags-reindex ()
  ;;   "Kick off gtags reindexing."
  ;;   (interactive)
  ;;   (let* ((root-path (expand-file-name (vc-git-root (buffer-file-name))))
  ;;          (gtags-filename (expand-file-name "GTAGS" root-path)))
  ;;     (if (file-exists-p gtags-filename)
  ;;         (gtags-index-update root-path)
  ;;       (gtags-index-initial root-path))))
  ;;
  ;; (defun gtags-index-initial (path)
  ;;   "Generate initial GTAGS files for PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "gtags")))
  ;;
  ;; (defun gtags-index-update (path)
  ;;   "Update GTAGS in PATH."
  ;;   (let ((bpr-process-directory path))
  ;;     (bpr-spawn "global -uv"))))
#+END_SRC
