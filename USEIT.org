
[[file:~/.config/emacs/modules/editor/evil/README.org::*Custom Text Objects][Custom Text Objects]] !!!

In minibuffer:
- ~C-a~   move-_beginning_-of-line
- ~C-u~   delete-back-to-indentation
- M-<   minibuffer-_beginning_-of-buffer
- M-p/n previous/next-history-element

~g~ key:
- g i :: *Switch to Insert state at previous insertion point.*

- ~M-x project-compile RET grep -Rn "something" RET~ - will create a compilation
  buffer with the results from grep, and each result will be a clickable link

SPC:
- * :: *Search* for *symbol at point* in project
- ` :: Switch to *last buffer*
- a :: *embark* actions

spc tab - _workspace_:
- "Switch workspace"          "."   #'+workspace/switch-to
- SPC TAB D - deletes workspace AND its savefile

ORG:
- spc m (localleader) l y - yank link at point

spc u spc f s - save file _without formatting it_

spc i s - yasnippet-consult (*instead of yas/lookup tables*)

g f - lookup file ([[https://github.com/doomemacs/doomemacs/commit/0a2bcf928c868db5cf41041bd707d3f395504130][gh commit]])

spc h - _help_:
- d m - doom/help-modules :: instead of opening init.el all the time..
- d p h - doom/help-package-homepage :: open homepage of a doom package directly
- d x / E - doom/sandbox :: test bed for running Emacs Lisp in another instance,
  without sacrificing access to installed packages. Use the sandbox to reproduce
  bugs and determine if Doom is to blame.
- h e - view-echo-area-messages :: open *Messages* buffer in popup (instead of
  switching to it)
- M - doom/describe-active-minor-mode :: instead of 'm'
- o - describe-symbol :: useful also to see info on modes, including keybindings
- P - find-library :: useful when need to see the source code of some package
- R - info-display-manual :: *quick info open*, instead of first opening info then
  searching there
- V - doom/help-custom-variable :: like 'v', but for defcustoms
- W - +default/man-or-woman :: *run grep on all man files*
- x - describe-command :: like describe-function, but only on interactive ones

spc b - _buffers_:
- "Set bookmark"                "m"   #'bookmark-set
- "Delete bookmark"             "M"   #'bookmark-delete
- "C" - clone current buffer to other window

_Find file UNDER particular dir_:
- "Find file from here"         "F"   #'+default/find-file-under-here

spc g - _magit_:
- "Magit dispatch"            "/"   #'magit-dispatch
- "Magit file dispatch"       "."   #'magit-file-dispatch
- *] / [  +goto prev/next tree sitter*

spc i - _insert_:
- "From clipboard"                "y"   #'+default/yank-pop
- "p" - insert result of command ran from current directory (prompts for bash cmd)
- "s" - insert snippet from current table ...

spc p - _project_:
"Browse other project"         ">" #'doom/browse-in-other-project
"Find recent project files"    "r" #'projectile-recentf

spc s - _search_:
- "Jump list"                    "j" #'evil-show-jumps
- "Jump to bookmark"             "m" #'bookmark-jump
- *"S" - search symbol at point in current buffer !!!*
- "B" - search in all opened buffers
- "I" - Select item from the imenus of all buffers from the same project.
- maybe "j" - show jumplist ?

C-x (C-SPC) - _corfu + cape_:
Emulation of Vim's omni-completion keybinds
    (:prefix "C-x"
      (:when (modulep! :completion corfu)
        :i "C-l"  #'cape-line
        :i "C-k"  #'cape-keyword
        :i "C-f"  #'cape-file
        :i "C-]"  #'complete-tag
        :i "s"    #'cape-dict
        :i "C-s"  #'yasnippet-capf
        :i "C-o"  #'completion-at-point
        :i "C-n"  #'cape-dabbrev
        :i "C-p"  #'+corfu/dabbrev-this-buffer))) <-- check it out

spc w - _windows_ (use ~spc w~ instead of ~C-c w~):
- "C-c"     #'ace-delete-window
- *"u" winner-undo !!!*

:n  "zx" #'kill-this-buffer
:n  "]w" #'+workspace/switch-right
:n  "[w" #'+workspace/switch-left
:v  "@"  #'+evil:apply-macro
:n  "g@" #'+evil:apply-macro

:m  ~]m~ / ~[m~   #'+evil/next/prev-beginning-of-method
:m  ~]M~ / ~[M~   #'+evil/next-end-of-method / '+evil/previous-end-of-method
:nv "gx"    #'evil-exchange
:nv "gy"    #'+evil:yank-unindented

~SPC h K~ (Info-goto-emacs-key-command-node) - Go to the node in the Emacs manual
which detailed description

In case ever be in project with for example different formatting params then
this might be useful to know:

#+begin_quote from 'format' module documentation
1. In a project's =.dir-locals.el= file:
   #+begin_src emacs-lisp
   ((js2-mode    . (+format-with . lsp))
    (python-mode . (+format-with . (isort black)))

    ;; If +format-inhibit is non-nil, formatting-on-save behavior will be
    ;; disabled, regardless of apheleia-global-mode.
    (rustic-mode . (+format-inhibit . t)))
   #+end_src
#+end_quote

* done ?
- - C-s   consult-_history_
- g O, SPC s i :: Jump to a place in the buffer chosen using a buffer menu or
  mouse menu. (=imenu=)
