#+STARTUP: nohideblocks

Here are some additional functions/macros that could help you configure Doom:
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- ~map!~ for binding new keys

!!! [[~/dotfiles/.config/emacs/lisp/demos.org][doom lisp demos]]

** Variables
Global:
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq
 ;; Some functionality uses this to identify you,
 ;; e.g. GPG configuration, email clients, file templates and snippets.
 user-full-name "earthian"
 user-mail-address "418@duck.com"

 ;; doom-theme 'doom-opera
 org-directory "~/Documents/org/"
 fill-column 80 ;; 70, must be a default value to work
 display-fill-column-indicator-column 80
 better-jumper-context 'buffer
 default-input-method "russian-computer"
 ;; A depth of 1 means check all the subdirectories of DIRECTORY.
 projectile-project-search-path '(("~/git" . 2)))
#+end_src

[[id:310c1ee3-2e64-4a4a-b494-53b90b813d7e][Fonts]]:
#+begin_src emacs-lisp
(setq
 ;; firacode nerd font
 doom-font (font-spec :family "jetbrainsmono nf" :size 17) ;; :weight 'light
 ;; for text modes, like Zen, Org or Markdown.
 doom-variable-pitch-font (font-spec :family "daddytimemono nerd font" :size 17)
 ;; Cyrillyc fonts:
 ;; BellotaText-Regular.ttf -> ../.
 ;; Comfortaa-VariableFont_wght.ttf
 ;; PoiretOne-Regular.ttf
 ;; PressStart2P-Regular.ttf
 ;; ShantellSans-VariableFont_BNCE,
 ;; Unbounded-VariableFont_wght.ttf
 ;; Jura-VariableFont_wght.ttf -> ..
 ;; MontserratAlternates-Regular.ttf
 doom-unicode-font (font-spec :family "bellotatext") ;; Symbola
 doom-big-font (font-spec :family "jetbrainsmono nf" :size 24))

  ;; 'pmsl nerd' - get all installed nerd fonts
  ;; doom-font (font-spec :family "saucecodepro nerd font" :size 17)
  ;; copy of source code pro but with better composite glyphs
  ;; doom-font (font-spec :family "hasklug nerd font" :size 17)
  ;; doom-font (font-spec :family "hack nerd font" :size 17)
#+end_src

Hlissner:
#+begin_src emacs-lisp
(setq
  ;; Line numbers are pretty slow all around. The performance boost of
  ;; disabling them outweighs the utility of always keeping them on.
  display-line-numbers-type nil

  ;; IMO, modern editors have trained a bad habit into us all: a burning need for
  ;; completion all the time -- as we type, as we breathe, as we pray to the
  ;; ancient ones -- but how often do you *really* need that information? I say
  ;; rarely. So opt for manual completion
  company-idle-delay nil
  )
#+end_src

Other:
#+begin_src emacs-lisp
(setq!
 browse-url-secondary-browser-function #'browse-url-xdg-open
 browse-url-generic-program #'eww
 pass-username-field "user")
#+end_src

** Keybindings

describe-function map!

#+begin_src emacs-lisp
(map! :leader :desc "M-x" "x" 'execute-extended-command)

(map! :leader :desc "Find file other window" "f o" 'find-file-other-window)
(map! :leader :desc "Switch to true last buffer" "b o" 'sad-true-switch-last-buffer)

(define-key global-map (kbd "C-,") 'embark-act)

;; Workspace binds
(map! :leader :desc "Previous workspace" "-" '+workspace/other)
(map! :leader :desc "Workspace swap right" :n "TAB ]" '+workspace/swap-right)
(map! :leader :desc "Workspace swap left" :n "TAB [" '+workspace/swap-left)

;; diff-hl bindings
(map! :leader :desc "Git show hunk" "gv" 'diff-hl-show-hunk)
(map! :leader :desc "Git show hunk" "g{" 'diff-hl-show-hunk-previous)
(map! :leader :desc "Git show hunk" "g}" 'diff-hl-show-hunk-next)

;; Other packages
(map! :leader :desc "Ace window" "ww" 'ace-window)

(map! :leader
      (:prefix "o" ;; just adds to already existing binds under that prefix
               (:prefix ("p" . "pass")
                :desc "Open pass buffer" "o" #'pass
                :desc "Pass consult" "p" #'+pass/consult
                :desc "Pass copy user" "u" #'+pass/copy-user)))
#+end_src

** Startup and Global modes
#+begin_src emacs-lisp
(global-subword-mode)
(global-auto-revert-mode)
#+end_src

** Other settings
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'auto-fill-mode)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)

(after! consult
  (setq locate-command "plocate"
        consult-locate-args "plocate --ignore-case --regex"))

(after! ranger
  (setq! ranger-show-hidden "format"))
#+end_src

** Custom f-s & advices
#+begin_src emacs-lisp
(defun advice--center-buffer (orig-fun &rest args)
  "Center butter."
  (evil-scroll-line-to-center (line-number-at-pos)))

(advice-add 'evil-ex-search :after #'advice--center-buffer)
(advice-add 'Info-next-reference :after #'advice--center-buffer)
(advice-add 'Info-prev-reference :after #'advice--center-buffer)

(defun sad-true-switch-last-buffer ()
  "Switch to REAL last open buffer (including buffers starting with *)."
  (interactive)
  (let ((previous-place (car (window-prev-buffers))))
    (when previous-place
      (switch-to-buffer (car previous-place))
      (goto-char (car (last previous-place))))))
#+end_src


** Development
*** TODO LSP
#+begin_src emacs-lisp
;; Disable invasive lsp-mode features
;; https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
(setq
 lsp-ui-sideline-enable nil   ; not anymore useful than flycheck
 lsp-ui-doc-enable nil        ; slow and redundant with K
 lsp-enable-symbol-highlighting t) ; why not

(setq lsp-vetur-format-default-formatter-html '"prettier")

(map!
 :map lsp-mode-map
 :leader
 :desc "Inlay hints mode"
 :n "c I" 'lsp-inlay-hints-mode)
#+end_src

*** Golang
#+begin_src emacs-lisp
;; https://github.com/golang/tools/blob/master/gopls/doc/settings.md
(after! go-mode
  (setq
   gofmt-command "gofmt"
   gofmt-args '("-s"))
  (add-hook! 'go-mode-hook
    (add-hook 'before-save-hook 'lsp-organize-imports nil t))
  (add-hook! 'go-mode-hook #'flymake-golangci-load-backend)
  (map! :map go-mode-map :localleader :n "z" 'dap-breakpoint-toggle))

(after! lsp-mode
  ;; https://github.com/golang/tools/blob/master/gopls/doc/settings.md
  (lsp-register-custom-settings
   '(("gopls.completeUnimported" t t)
     ;; ("gopls.vulncheck" "imports")
     ;; https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md
     ("gopls.hints.assignVariableTypes" t t)
     ("gopls.hints.compositeLiteralFields" t t)
     ("gopls.staticcheck" t t))))
#+end_src

*** KILL JS
#+begin_src emacs-lisp
(after! js2-mode
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src

*** Shell
#+begin_src emacs-lisp
(after! sh-script
  (set-company-backend! 'sh-mode '(company-shell :with company-yasnippet))
  (add-hook! 'sh-mode-hook (setq apheleia-formatter 'shfmt)))
#+end_src

*** Magit & forge
Magit:
#+begin_src emacs-lisp
(setq
 ;; magit-save-repository-buffers nil
 ;; Don't restore the wconf after quitting magit, it's jarring
 magit-inhibit-save-previous-winconf t
 ;; Enable Gravatars REVIEW does it even works?
 ;; This will enable gravatars when viewing commits.
 ;; The service used by default is Libravatar.
 magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
 )
#+end_src

Forge:
#+begin_src emacs-lisp
;; my attempts to make forge work with custom gitlab url...
;; did not suffice elisp knowledge to do that (not all forge functions were working..)
(after! forge
  (push '("gitlab.medpoint24.ru" "gitlab.medpoint24.ru/api/v4"
          "gitlab.medpoint24.ru" forge-gitlab-repository) forge-alist))
#+end_src

** Docker
#+begin_src emacs-lisp
(setq! docker-command "podman"
       docker-container-shell-file-name "/bin/zsh")
#+end_src

** Doom dashboard
#+begin_src emacs-lisp
;; (setq fancy-splash-image (concat doom-private-dir "splash.png"))
;; Hide the menu for as minimalistic a startup screen as possible.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner doom-dashboard-widget-loaded))
#+end_src

** Elcord [[https://github.com/Mstrodl/elcord][#gh]]
#+begin_src elisp
(elcord-mode)
(setq!
 elcord-idle-message "Brewing tea ..."
 elcord-editor-icon "emacs_material_icon")
;; ignore all telega stuff
(add-to-list 'elcord-boring-buffers-regexp-list "◀")
(add-to-list 'elcord-boring-buffers-regexp-list  "\\\\*Telega Root\\\\*")
#+end_src

** Elfeed
- https://github.com/skeeto/elfeed#filter-syntax
- maybe setup [[https://github.com/emacsmirror/spray][spray]] for effective reading? ([[https://noonker.github.io/posts/2020-04-22-elfeed/][source]])
- [[https://nullprogram.com/blog/2013/11/26/][Elfeed Tips and Tricks]] (from the author himself)

#+begin_src emacs-lisp
(setq
 rmh-elfeed-org-files '("~/Documents/rss/elfeed.org")
 elfeed-db-directory "~/Documents/rss/db"
 ;; "@6-month-ago +unread" will show only unread ones
 ;; and thats how you add tags to filter string
 elfeed-search-filter "@6-month-ago")

(map! :leader
      :prefix ("r" . "RSS")
      "o" #'=rss
      "r" #'elfeed-update
      "l" #'elfeed-goodies/toggle-logs
      "e" #'sad/elfeed-org-export-opml
      "u" #'elfeed-show-tag--unread)

;; maybe call this func in 'elfeed-new-entry-hook', but for now manually
(defun sad/elfeed-org-export-opml ()
  "Export Org feeds under `rmh-elfeed-org-files' to an OPML file."
  (interactive)
  (let ((opml-body (cl-loop for org-file in rmh-elfeed-org-files
                            concat
                            (with-temp-buffer
                              (insert-file-contents
                               (expand-file-name org-file org-directory))
                              (rmh-elfeed-org-convert-org-to-opml
                               (current-buffer))))))
    (with-temp-file "~/Documents/rss/elfeed.opml"
      (insert "<?xml version=\"1.0\"?>\n")
      (insert "<opml version=\"1.0\">\n")
      (insert "  <head>\n")
      (insert "    <title>Elfeed-Org Export</title>\n")
      (insert "  </head>\n")
      (insert "  <body>\n")
      (insert opml-body)
      (insert "  </body>\n")
      (insert "</opml>\n"))))
#+end_src

** Emms
#+begin_src emacs-lisp
(after! emms
  (add-to-list 'emms-player-list 'emms-player-mpd)
  (add-to-list 'emms-info-functions 'emms-info-mpd)
  (add-hook 'emms-player-started-hook #'emms-mpris-enable)
  (add-hook 'emms-player-stopped-hook #'emms-mpris-disable)
  (setq!
   emms-source-file-default-directory "~/Music"
   emms-player-mpd-music-directory "~/Music"
   emms-source-playlist-default-format 'm3u
   emms-info-native--max-vorbis-comment-size 150000
   emms-repeat-playlist t
   emms-playlist-mode-center-when-go t
   emms-show-format "♪ %s"
   emms-browser-default-browse-type 'info-album
   ;; new settings
   ;; covers
   emms-browser-covers #'emms-browser-cache-thumbnail-async
   emms-browser-thumbnail-small-size 32
   emms-browser-thumbnail-medium-size 64))

;; run the 'emms-cache-set-from-mpd-all' to fill the Emms cache with the
;; contents of your MusicPD database. The music in your MusicPD database should
;; then be accessible via the Emms browser.

(map! :leader
      (:prefix ("l" . "listen")

       ;; Playback
       :desc "Current playlist buffer" "c" #'emms
       :desc "Pause" "x" #'emms-pause
       :desc "Stop" "X" #'emms-stop
       :desc "Next" "n" #'emms-next
       :desc "Previous" "p" #'emms-previous
       :desc "Shuffle" "S" #'emms-shuffle
       :desc "Loop playlist (toggle)" "L" #'emms-toggle-repeat-playlist
       ;; :desc "Loop track (toggle)" "L" #'emms-toggle-repeat-track
       ;; :desc "Browser / open close" "b" #'emms-smart-browse
       ;; :desc "Bury emms buffers" "q" #'emms-browser-bury-buffer

       ;; Daemon / db bindings
       :desc "Start daemon" "s" #'+emms/mpd-start-music-daemon
       :desc "Restart daemon" "r" #'+emms/mpd-restart-music-daemon
       ;; call this manually for the newly added tracks to show up in emms
       :desc "Update db" "u" #'+emms/mpc-update-database ;; gets called on 'start'
       :desc "Update all + cache" "R" #'emms-player-mpd-update-all-reset-cache

       ;; Play ...
       (:prefix ("l" . "Play")
        :desc "directory" "d" #'emms-play-directory
        :desc "directory tree" "D" #'emms-play-directory-tree
        :desc "files matching regex" "f" #'emms-play-find
        :desc "file" "F" #'emms-play-file
        :desc "url (ie for streaming)" "u" #'emms-play-url)))
#+end_src

** Evil
#+begin_src emacs-lisp
(setq
 ;; Focus new window after splitting
 evil-split-window-below t
 evil-vsplit-window-right t
 evil-want-C-u-delete nil)

;; Evil digraph
(map! :leader
      (:prefix ("d" . "digraph")
       :desc "Insert COUNT digraphs" "i" 'evil-insert-digraph
       :desc "Shows a list of all available digraphs" "s" 'evil-ex-show-digraphs
       :desc "Read two keys from keyboard forming a digraph" "r" 'evil-read-digraph-char))
#+end_src

** TODO Ewal
- [ ] package is abandoned, some time in the future clone it and rewrite to your needs
- [ ] any way to make all colors brighter? not contrasty, but just brighter

#+begin_src emacs-lisp
(use-package! ewal
  :init
  (setq
   ewal-use-built-in-always-p nil
   ewal-use-built-in-on-failure-p t
   ewal-shade-percent-difference 5)
  :config 
  (load-theme 'ewal-doom-one t) ;; ewal-doom-vibrant-theme
  (enable-theme 'ewal-doom-one)
  (ewal-evil-cursors-get-colors :apply t))
#+end_src

** TODO Eww
- [ ] setup bookmarks (gopkgs) and bindings
- [[file:~/dotfiles/.config/emacs/.local/straight/repos/evil-collection/modes/eww/evil-collection-eww.el][evil-collection-eww.el]]

#+begin_src emacs-lisp
(map! :leader :desc "Web Wowser" "oe" 'eww)

(after! eww
  (setq!
   ;; make emacs always use its own browser for opening URL links
   browse-url-browser-function 'eww-browse-url
   eww-search-prefix "https://www.google.com/search?q="
   eww-bookmarks-directory "~/Documents/"
   +lookup-open-url-fn #'eww
   ;; title / url / custom func
   eww-auto-rename-buffer 'title)
  (map! :map eww-mode-map :n "gy" #'eww-copy-page-url)
  (map! :map eww-mode-map :n "r" #'eww-reload))

(after! dash-docs (setq dash-docs-browser-func #'eww))
#+end_src

** Golden-ratio
#+begin_src emacs-lisp
(use-package! golden-ratio
  :config
  (setq! golden-ratio-extra-commands
         '(windmove-left windmove-right windmove-down windmove-up evil-window-up
           evil-window-down evil-window-right evil-window-left)
         golden-ratio-exclude-buffer-regexp '("^\\*"))) ;; otherwise emacs hangs
#+end_src

** IRC

- https://github.com/emacs-circe/circe/wiki/Configuration

#+BEGIN_SRC emacs-lisp
(map! :leader :desc "IRC" "oi" '=irc)

;; if you omit =:host=, ~SERVER~ will be used instead.
(after! circe
  (setq circe-default-part-message "(⌣_⌣”)"
        circe-default-quit-message "o/")

  ;; view 'circe-network-defaults' var to view predefined networks
  (setq circe-network-options
    `(("Libera Chat"
       :nick "earthian"
       :sasl-username ,(+pass-get-user "irc/libera.chat")
       :sasl-password (lambda (&rest _) (+pass-get-secret "irc/libera.chat")))
       ;; :channels ("#emacs" "#systemcrafters"))
      ("OFTC"
       :nick "earthian"
       :sasl-username ,(+pass-get-user "irc/libera.chat")
       :sasl-password (lambda (&rest _) (+pass-get-secret "irc/libera.chat"))))))
       ;; :channels ("#emacs" "#systemcrafters")))))

  ;; in case circe will start supporting DCC
  ;; (set-irc-server! "irc.undernet.org"
  ;;   `(;; :tls t
  ;;     :port 6667
  ;;     :nick "seme4eg"
  ;;     :channels ("#ebooks" "#Bookz")
  ;;     ))
  ;; (set-irc-server! "irc.irchighway.net"
  ;;   `(:port 6669
  ;;     :nick "seme4eg"
  ;;     :channels ("#ebooks")
  ;;     ))

;; TODO: write a function to upload image to 0x0 from a clipboard
;; (use-package! 0x0)
#+END_SRC

** Langtool
#+begin_src emacs-lisp
(after! langtool
  (setq langtool-default-language "ru-RU"
        langtool-disabled-rules '(
                                  "Many_PNN"
                                  "OPREDELENIA"
                                  "talk"
                                  "DoubleNOT"
                                  "COMMA_DEFIS"
                                  "UPPERCASE_SENTENCE_START"
                                  "DOUBLE_PUNCTUATION"
                                  "DoubleIH"
                                  "LICHNO_JA")))
;; langtool-disabled-rules '("DOUBLE_PUNCTUATION[1] premium: false" "Many_PNN[1] premium: false prio=-50")))
(map! :leader
    :prefix ("y" . "langtool")
    "." #'langtool-show-message-at-point
    "," #'langtool-show-brief-message-at-point
    "c" #'langtool-check
    "b" #'langtool-check-buffer
    "f" #'langtool-correct-buffer ;; fix fix fix
    "s" #'langtool-check-done
    "[" #'langtool-goto-previous-error
    "]" #'langtool-goto-next-error)
#+end_src

** Mu4e
#+begin_src emacs-lisp
(load-file "~/.config/doom/mu4e.el")
#+end_src

** Org
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook 'auto-fill-mode)

(after! org
  (map! :map org-mode-map
        :localleader
        :n "bS" 'org-table-shrink
        :n "bE" 'org-table-expand
        :n "bts" 'org-table-toggle-column-width)
  (set-popup-rule! "^\\*Org Src" :ignore t)
  (setq
   ;; show files like TOC on startup
   org-startup-folded 'content
   org-hide-block-startup t
   org-startup-shrink-all-tables t
   org-hide-emphasis-markers t)

  (add-to-list 'org-capture-templates '("t" "Tea entry" entry
                                        (file +org-capture-project-notes-file)
                                        "%[~/git/tea/template]"
                                        :jump-to-captured t
                                        :clock-in t
                                        :clock-keep t
                                        :empty-lines 1))

  ;; now after typing 'C-c C-,' u will will get a new option to chose from
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp\n")))
#+end_src

** Popup
- see doom package readme, but here is settings [[https://github.com/amosbird/serverconfig/blob/master/.config/doom/config.el#L1657][example]]
- current popup settings see in ~display-buffer-alist~ var

#+begin_src emacs-lisp
(set-popup-rules!
  '(("^\\*eww" :ignore t)
    ("^\\*helpful" :ignore t) ;; Any way to open helpful buffers on top of each other?
    ("^\\*\\(?:Wo\\)?Man " :ignore t)
    ("^\\*info\\*$" :ignore t)))
#+end_src

** Proced [[file:~/dotfiles/.config/emacs/.local/straight/repos/evil-collection/modes/proced/evil-collection-proced.el][evil-collection-proced.el]]
#+begin_src emacs-lisp
(setq! proced-tree-flag t
       proced-auto-update-flag t
       proced-enable-color-flag t
       proced-format 'medium
       proced-auto-update-interval 1
       proced-format-alist
       '((short user pid tree pcpu pmem start time (args comm))
         (medium user pid tree pcpu pmem vsize rss ttname state start time comm)
         (long
          user euid group pid tree pri nice pcpu pmem vsize rss ttname state
          start time comm)
         (verbose
          user euid group egid pid ppid tree pgrp sess pri nice pcpu pmem state
          thcount vsize rss ttname tpgid minflt majflt cminflt cmajflt start time
          utime stime ctime cutime cstime etime comm)))
#+end_src
** TODO Syntax + flymake
#+begin_src emacs-lisp
(after! flymake
  ;; Didn't manage to make it ignore my config files
  ;; (add-to-list 'flymake-proc-allowed-file-name-masks
  ;;              '("init\\.el\\'" nil))

  (map! :n "]e" #'flymake-goto-next-error)
  (map! :n "[e" #'flymake-goto-prev-error)
  (map! :leader :prefix ("v" . "syntax")
        "l" #'consult-flymake
        "]" #'flymake-goto-next-error
        "[" #'flymake-goto-prev-error
        "x" #'flymake-proc-stop-all-syntax-checks))
#+end_src

** TODO Telega
#+begin_src emacs-lisp
(map! :leader "o c" 'telega)
(setq telega-server-libs-prefix "/usr") ;; cuz aur package installs there
(map! :after telega :leader
      :prefix ("z" . "telegram")
      "a" #'telega-account-switch
      "b" #'telega-switch-buffer
      "c" #'telega-chat-with
      "S" #'telega-chatbuf-attach-scheduled
      "f" #'telega-buffer-file-send
      "s" #'telega-saved-messages
      "t" #'telega
      "u" #'telega-switch-unread-chat)

(after! telega
  (telega-notifications-mode)
  (telega-mode-line-mode)
  (global-telega-squash-message-mode)
  ;; (telega-image-mode) ;; n/p next prev img in chat
  (auto-fill-mode)

  (require 'telega-dired-dwim)

  ;; eval-buffer: Cannot open load file: No such file or directory, dashboard
  ;; (require 'telega-dashboard)
  ;; (add-to-list 'dashboard-items '(telega-chats . 5))

  (setq
   telega-completing-read-function #'completing-read
   telega-emoji-company-backend 'telega-company-emoji
   telega-notifications-timeout 3600 ;; crutch basically
   telega-url-shorten-use-images t)

  (add-hook 'telega-chat-mode-hook
            (lambda ()
              (define-key telega-msg-button-map (kbd "SPC") nil)
              (setq truncate-lines nil
                    visual-fill-column-extra-text-width '(0 . 2))
              (set (make-local-variable 'company-backends)
                   (append (list telega-emoji-company-backend
                                 'telega-company-username
                                 'telega-company-hashtag)
                           (when (telega-chat-bot-p telega-chatbuf--chat)
                             '(telega-company-botcmd))))
              (company-mode 1))))
#+end_src


** WAIT GPTel [[https://github.com/karthink/gptel][#gh]]
#+begin_src elisp
(defun e/read-openai-key ()
  (with-temp-buffer
    (insert-file-contents "~/key.txt")
    (string-trim (buffer-string))))

(use-package! gptel
  :config
  (map! :leader "e" 'gptel)
  (setq! gptel-default-mode 'org-mode
         gptel-api-key #'e/read-openai-key))
#+end_src

** WAIT Corfu [[https://github.com/minad/corfu][#github]]

NOTE: [[https://github.com/minad/corfu#transfer-completion-to-the-minibuffer][transfer completion to minibuffer]]

#+begin_src emacs-lisp :tangle no
(after! corfu
  :custom
  (corfu-cycle t)
  (corfu-auto nil)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.0)
  (corfu-quit-at-boundary 'separator)
  (corfu-preview-current 'insert)
  (corfu-preselect 'first)
  :init
  (global-corfu-mode)
  ;; (corfu-popupinfo-mode) ;; C-h below does same but manually
  (corfu-history-mode)
  ;; (corfu-echo-mode)
  (evil-collection-corfu-setup)
  (map! :g "C-SPC" #'completion-at-point)
  (map! :map corfu-map
        :nvi "SPC" #'corfu-insert-separator
        :nvi "C-g" (lambda () (progn (corfu-reset)
                                (evil-collection-corfu-quit-and-escape)))
        :nvi "C-h" #'corfu-info-documentation))
#+end_src

** WAIT Cape [[https://github.com/minad/cape][#github]]
#+begin_src emacs-lisp :tangle no
(after! cape
  :defer 10
  :init
  ;; Add 'completion-at-point-functions', used by 'completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  :config
  ;; silence then pcomplete capf, no errors or messages
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

** WAIT Colemak
- my-hjkl-rotation func doesn't change anything, tried many things, didn't work
- [[https://github.com/emacs-evil/evil-collection#key-translation][evil-collection key translation]], some ppl also have [[https://github.com/emacs-evil/evil-collection/issues/583][trouble]] making it work in doom.
- penging [[https://github.com/doomemacs/doomemacs/pull/5835/files][PR]] in doom emacs repo for colemak
- [[https://github.com/wbolster/emacs-evil-colemak-basics][emacs-evil-colemak-basics]] is awesome but overwrides too much and isn't
  integrated with evil-collection, well.. its 'basics'
- in [[https://github.com/Phundrak/config.phundrak.com/blob/87b3deeed34305985e4cc5253d71ca6640efb1f3/docs/emacs/keybinding-managers.org#L155][this]] setup same code works

#+begin_src emacs-lisp :tangle no
;; (use-package! evil-colemak-basics
;;   :init
;;   (setq evil-colemak-basics-layout-mod 'mod-dh))
  ;; :config
  ;; (global-evil-colemak-basics-mode))

;; hjkl
;; mnei
;; (defun my-hjkl-rotation (_mode mode-keymaps &rest _rest)
;;   ;; (evil-collection-translate-key '(normal motion visual operator) mode-keymaps
;;   (evil-collection-translate-key 'normal mode-keymaps
;;     "m" "h"
;;     "n" "j"
;;     "e" "k"
;;     "i" "l"
;;     "h" "m"
;;     "j" "e"
;;     "k" "n"
;;     "l" "i"
;;     (kbd "C-n") (kbd "C-j")
;;     (kbd "C-e") (kbd "C-k")
;;     "gn" "gj"
;;     "ge" "gk"
;;     :destructive nil))

;; called after evil-collection makes its keybindings
;; (add-hook! 'evil-collection-setup-hook #'my-hjkl-rotation)
;; (add-hook 'evil-collection-setup-hook #'my-hjkl-rotation)
;; (evil-collection-init)
#+end_src
** WAIT Elm
#+begin_src emacs-lisp :tangle no
(after! elm-mode
  (add-to-list 'company-backends 'elm-company)
  (add-hook 'elm-mode-hook 'elm-format-on-save-mode))
#+end_src
