#+STARTUP: nohideblocks

* Readme
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

Here are some additional functions/macros that could help you configure Doom:
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- ~map!~ for binding new keys

* Variables
Local:
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Global:
#+begin_src emacs-lisp
(setq
  ;; Some functionality uses this to identify you,
  ;; e.g. GPG configuration, email clients, file templates and snippets.
  user-full-name "sad"
  user-mail-address "d3v1ant@mail.ru"

  ;; doom-theme 'doom-opera
  org-directory "~/org/"
  fill-column 80 ;; 70, must be a default value to work
  display-fill-column-indicator-column 80
  better-jumper-context 'buffer
  default-input-method "russian-computer"
  projectile-project-search-path '("~/git/")
  ;; make emacs always use its own browser for opening URL links
  browse-url-browser-function 'eww-browse-url)

#+end_src

[[id:310c1ee3-2e64-4a4a-b494-53b90b813d7e][Fonts]]:
#+begin_src emacs-lisp
(setq
 ;; firacode nerd font
 doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 17) ;; :weight 'light
 ;; for text modes, like Org or Markdown.
 doom-variable-pitch-font (font-spec :family "daddytimemono nerd font" :size 17)
 doom-unicode-font (font-spec :family "Symbola")
 doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24))

  ;; 'pmsl nerd' - get all installed nerd fonts
  ;; doom-font (font-spec :family "saucecodepro nerd font" :size 17)
  ;; copy of source code pro but with better composite glyphs
  ;; doom-font (font-spec :family "hasklug nerd font" :size 17)
  ;; doom-font (font-spec :family "hack nerd font" :size 17)
#+end_src

Hlissner:
#+begin_src emacs-lisp
(setq
  ;; Line numbers are pretty slow all around. The performance boost of
  ;; disabling them outweighs the utility of always keeping them on.
  display-line-numbers-type nil

  ;; IMO, modern editors have trained a bad habit into us all: a burning need for
  ;; completion all the time -- as we type, as we breathe, as we pray to the
  ;; ancient ones -- but how often do you *really* need that information? I say
  ;; rarely. So opt for manual completion
  company-idle-delay nil
  )
#+end_src
* Keybindings
Learn how to properly define your custom keybindings you can in [[https://www.youtube.com/watch?v=QRmKpqDP5yE&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=28][this vid]]

#+begin_src emacs-lisp
(map! :leader :desc "M-x" "x" 'execute-extended-command)
(map! :leader
      :desc "Git gutter popup hunk"
      "gv"
      'git-gutter:popup-hunk)
(map! :leader :desc "Ace window" "ww" 'ace-window)
(map! :leader :desc "Xwidget" "ox" 'xwidget-webkit-browse-url)
(map! :leader :desc "Web Wowser" "oe" 'eww)

(map! :leader :desc "Edmacro insert key" "i k" 'sad-wrapped-eik)
(map! :leader :desc "Find file other window" "f o" 'find-file-other-window)
(map! :leader :desc "Theme other" "t o" 'sad-theme-randomize)
(map! :leader :desc "Switch to true last buffer" "b o" 'sad-true-switch-last-buffer)

(define-key global-map (kbd "C-,") 'embark-act)

;; Digraph
(map! :leader
      (:prefix-map ("d" . "digraph")
       :desc "Insert COUNT digraphs" "i" 'evil-insert-digraph
       :desc "Shows a list of all available digraphs" "s" 'evil-ex-show-digraphs
       :desc "Read two keys from keyboard forming a digraph" "r" 'evil-read-digraph-char))

#+end_src
* Startup and Global modes
#+begin_src emacs-lisp
;; Set frame transparency
;; (set-frame-parameter (selected-frame) 'alpha '(90 . 90)) ;; (active . inactive)
;; set alpha on all *new* frames created by emacs
;; (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
;; (set-frame-parameter (selected-frame) 'fullscreen 'fullscreen)
;; initial-frame-alist ?
;; (add-to-list 'default-frame-alist '(fullscreen . t))

;; Prevents some cases of Emacs flickering
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

(global-subword-mode)
(global-display-fill-column-indicator-mode)
(global-auto-revert-mode)
#+end_src

* Development
** LSP
#+begin_src emacs-lisp
;; Disable invasive lsp-mode features
(setq
  lsp-ui-sideline-enable nil   ; not anymore useful than flycheck
  lsp-ui-doc-enable nil        ; slow and redundant with K
  lsp-enable-symbol-highlighting nil
  )

(setq lsp-vetur-format-default-formatter-html '"prettier")
#+end_src

** JS
#+begin_src emacs-lisp
;; does this even work? and is it even needed?
(set-docsets! 'js2-mode "JavaScript")

(after! js2-mode
  (add-hook 'js2-mode-hook #'jest-minor-mode)
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src
** Elm
#+begin_src emacs-lisp
;; (add-to-list 'company-backends 'elm-company)
;; (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src
** Shell
#+begin_src emacs-lisp
(after! sh-script
  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet)))
#+end_src
** Magit & forge
Magit:
#+begin_src emacs-lisp
(setq
 ;; magit-save-repository-buffers nil
 ;; Don't restore the wconf after quitting magit, it's jarring
 magit-inhibit-save-previous-winconf t
 transient-values '((magit-rebase "--autosquash" "--autostash")
                    (magit-pull "--rebase" "--autostash"))
 ;; Enable Gravatars REVIEW does it even works?
 ;; This will enable gravatars when viewing commits.
 ;; The service used by default is Libravatar.
 magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
 )
#+end_src

Forge:
#+begin_src emacs-lisp
;; my attempts to make forge work with custom gitlab url...
;; did not suffice elisp knowledge to do that (not all forge functions were working..)
(after! forge
  (push '("gitlab.medpoint24.ru" "gitlab.medpoint24.ru/api/v4"
          "gitlab.medpoint24.ru" forge-gitlab-repository) forge-alist))
#+end_src

* Evil
#+begin_src emacs-lisp
;; Focus new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* Org
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
;; (add-hook! 'org-mode-hook (company-mode -1))
(add-hook! 'org-capture-mode-hook (company-mode -1))

(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'org-babel-tangle
                          :append :local)))

;; didn't work out for me cuz https://orgmode.org/manual/Custom-time-format.html
;; (setq org-time-stamp-custom-formats '("<%a %d-%m-%Y>" . "<%a %d-%m-%Y %H:%M>"))
;; (setq org-display-custom-times t)

;; TODO: make those active only in org-mode
(after! org
  (map! :leader
        :desc "Shrink" "mbS" 'org-table-shrink
        :desc "Expand" "mbE" 'org-table-expand
        :desc "Toggle width" "mbts" 'org-table-toggle-column-width)

  (setq
   org-src-window-setup 'current-window
   ;; Sort the footnote definitions by reference sequence.
   org-footnote-auto-adjust 'sort
   ;; show files like TOC on startup
   org-startup-folded 'content
   org-hide-block-startup t
   org-startup-shrink-all-tables t
   ;; org-ellipsis " ▾ "
   org-hide-emphasis-markers t)

  ;; org capture templates redefining
  (setq org-capture-templates
        (append
         '(
           ("t" "Tea entry" entry
            (file +org-capture-project-notes-file)
            "%[~/git/tea/templates/newEntry]"
            :jump-to-captured t
            :immediate-finish t
            :clock-in t
            :clock-keep t
            :empty-lines 1)
           ("n" "Notes file settings prepend" plain
            (file +org-capture-project-notes-file)
            "%[~/git/tea/templates/notesFileSettings]"
            :prepend t
            :immediate-finish t
            :empty-lines-after 1)
           ;; To insert template at point, in current file call 'spc-X' with
           ;; 'spc u 0' prefix
           ("i" "Info file settings prepend (call from a directory with info file!)" plain
            (file "./info.org")
            "%[~/git/tea/templates/infoFileSettings]"
            :prepend t
            :immediate-finish t
            :empty-lines-after 1)
           ("p" "Project-local todo" checkitem
            (file+headline +org-capture-project-todo-file "List of todos")
            "" :prepend t)
           ("T" "Personal todo" entry
            (file+headline +org-capture-todo-file "Todo")
            "* [ ] %?\n%i" :prepend t)
           ("j" "Journal" entry
            (file+olp+datetree +org-capture-journal-file)
            "* %U %?\n%i\n%a" :prepend t))

         org-capture-templates)))

;; org-mode agenda options
;; TODO: how to do it with evil embrace?
;; now after typing 'C-c C-,' u will will get a new option to chose from
(after! org (add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp\n")))

#+end_src

** Org journal
#+begin_src emacs-lisp
;; journal setup
(setq
  org-journal-date-prefix "#+TITLE: "
  org-journal-time-prefix "* "
  org-journal-date-format "%a, %d-%m-%Y"
  org-journal-file-format "%Y-%m-%d.org")
#+end_src

* Emacs everywhere
#+begin_src emacs-lisp
;; :app everywhere FIXME: throws error when first loading
(after! emacs-everywhere
  ;; Easier to match with a bspwm rule:
  ;;   bspc rule -a 'Emacs:emacs-everywhere' state=floating sticky=on
  (setq emacs-everywhere-frame-name-format "emacs-anywhere")

  ;; The modeline is not useful to me in the popup window. It looks much nicer
  ;; to hide it.
  (remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)

  ;; Semi-center it over the target window, rather than at the cursor position
  ;; (which could be anywhere).
  (defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
    :override #'emacs-everywhere-set-frame-position
    (cl-destructuring-bind (x y width height)
        (emacs-everywhere-window-geometry window-info)
      (set-frame-position frame
                          (+ x (/ width 2) (- (/ width 2)))
                          (+ y (/ height 2))))))
#+end_src
* Doom dashboard
#+begin_src emacs-lisp
;; (setq fancy-splash-image (concat doom-private-dir "splash.png"))
;; Hide the menu for as minimalistic a startup screen as possible.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

(setq +doom-dashboard-functions
      '(doom-dashboard-widget-banner doom-dashboard-widget-loaded))
#+end_src
* Mu4e
#+begin_src emacs-lisp
(setq
 ;; This is set to 't' to avoid mail syncing issues when using mbsync
 mu4e-change-filenames-when-moving t
 ;; Refresh mail using isync every 10 minutes
 mu4e-update-interval 300)
 ;; Configure the function to use for sending mail

(setq smtpmail-smtp-server  "smtp.mail.ru"
      smtpmail-smtp-service 465
      smtpmail-stream-type  'ssl
      smtpmail-debug-info t ;; enables debug buffer 'trace of SMTP ...'
      message-send-mail-function 'smtpmail-send-it)

;; (setq sendmail-program (executable-find "msmtp")
;;       send-mail-function #'smtpmail-send-it
;;       message-sendmail-f-is-evil t
;;       message-sendmail-extra-arguments '("--read-envelope-from")
;;       message-send-mail-function #'message-send-mail-with-sendmail)

(set-email-account! "d3v1ant@mail.ru"
                   '((user-mail-address     . "d3v1ant@mail.ru")
                     (user-full-name        . "A.L.")
                      ;; text in the end of composed mail
                      ;; (mu4e-compose-signature . "- sad\nnewline")
                     (mu4e-drafts-folder    . "/mailru/d3v1ant/Drafts")
                     (smtpmail-smtp-user    . "d3v1ant@mail.ru")
                     (mu4e-sent-folder      . "/mailru/d3v1ant/Sent")
                     (mu4e-refile-folder    . "/mailru/d3v1ant/Inbox")
                     (mu4e-trash-folder     . "/mailru/d3v1ant/Trash")))

(setq mu4e-maildir-shortcuts
      '((:maildir "/mailru/d3v1ant/Inbox"  :key ?i)
        (:maildir "/mailru/d3v1ant/Sent"   :key ?s)
        (:maildir "/mailru/d3v1ant/Trash"  :key ?t)
        (:maildir "/mailru/d3v1ant/Drafts" :key ?d)
        (:maildir "/mailru/d3v1ant/Spam"   :key ?a)

        (:maildir "/gmail/Inbox"  :key ?I)
        (:maildir "/gmail/Sent"   :key ?S)
        (:maildir "/gmail/Trash"  :key ?T)
        (:maildir "/gmail/Drafts" :key ?D)
        (:maildir "/gmail/Spam"   :key ?A)))
#+end_src

* Telega
#+begin_src emacs-lisp
(map! :leader "o c" 'telega)
(setq telega-server-libs-prefix "/usr") ;; cuz aur package installs there
(map! :after telega :leader
      :prefix ("z" . "telegram")
      "a" #'telega-account-switch
      "b" #'telega-switch-buffer
      "c" #'telega-chat-with
      "e" #'telega-edit-file-switch-buffer
      "i" #'telega-switch-important-chat
      "f" #'telega-buffer-file-send
      "s" #'telega-saved-messages
      "t" #'telega
      "u" #'telega-switch-unread-chat
      "w" #'telega-browse-url)

(after! telega
  (telega-notifications-mode)
  (telega-mode-line-mode)
  (global-telega-squash-message-mode)
  ;; FIXME: kbds shadowed by evil
  (telega-image-mode) ;; n/p next prev img in chat
  (auto-fill-mode)

  (require 'telega-dired-dwim)

  ;; eval-buffer: Cannot open load file: No such file or directory, dashboard
  ;; (require 'telega-dashboard)
  ;; (add-to-list 'dashboard-items '(telega-chats . 5))

  (require 'telega-url-shorten)
  (global-telega-url-shorten-mode)

  ;; company-mode setup might look like:
  (setq
   telega-completing-read-function #'completing-read
   telega-emoji-company-backend 'telega-company-emoji)


  ;; (setq telega-url-shorten-use-images t)
  (add-to-list 'telega-browse-url-alist
               '("https?://\\(www\\.\\)?youtube.com/watch" . my-watch-in-mpv))
  (add-to-list 'telega-browse-url-alist
               '("https?://youtu.be/" . my-watch-in-mpv))

  (add-hook 'telega-chat-mode-hook 'my-telega-chat-mode)

  ;; play youtube videos using mpv player
  (defun my-watch-in-mpv (url)
    (async-shell-command (format "mpv -v %S" url)))

  (defun my-telega-chat-mode ()
    (define-key telega-msg-button-map (kbd "SPC") nil)
    (setq truncate-lines nil)
    (set (make-local-variable 'company-backends)
         (append (list telega-emoji-company-backend
                       'telega-company-username
                       'telega-company-hashtag)
                 (when (telega-chat-bot-p telega-chatbuf--chat)
                   '(telega-company-botcmd))))
    (company-mode 1)))

#+end_src
* Emms
#+begin_src emacs-lisp
(setq-default
 emms-source-file-default-directory "~/Music/"
 emms-player-mpd-music-directory "/home/sad/Music/"
 ;; emms-source-playlist-default-format 'm3u
 emms-playlist-mode-center-when-go t
 emms-show-format "NP: %s"
 emms-browser-default-browse-type 'info-album
 emms-player-mpd-server-port "6559"
 )

(after! emms
  (add-to-list 'emms-player-list 'emms-player-mpd)
  (add-to-list 'emms-info-functions 'emms-info-mpd)
  )

;; Once you've done the above, run the 'M-x emms-cache-set-from-mpd-all'
;; command to fill the Emms cache with the contents of your MusicPD
;; database. The music in your MusicPD database should then be accessible
;; via the Emms browser.

(map! :leader
      (:prefix ("l" . "listen")

       ;; Playback
       :desc "Browser" "l" #'emms-smart-browse
       :desc "Play cur. playlist" "SPC" #'emms-start
       :desc "Stop" "x" #'emms-pause
       :desc "Stop" "X" #'emms-stop
       :desc "Next" "n" #'emms-next
       :desc "Previous" "p" #'emms-previous
       :desc "Shuffle" "S" #'emms-shuffle
       :desc "Loop track (toggle)" "L" #'emms-toggle-repeat-track
       :desc "Bury emms buffers" "q" #'emms-browser-bury-buffer

       :desc "Play all files matching regex" "f" #'emms-play-find

       ;; Playlists
       (:prefix ("P" . "Playlist")
        :desc "Loop playlist (toggle)" "L" #'emms-toggle-repeat-playlist
        :desc "Shuffle (toggle)" "S" #'emms-toggle-random-playlist
        :desc "Edit playlist buffers" "l" #'emms-metaplaylist-mode-go
        )
       ;; Bookmarks
       (:prefix ("B" . "Bookmarks")
        :desc "Add new bookmark to cur. track" "a" #'emms-bookmarks-add
        :desc "Sek to next bookmark in cur. track" "n" #'emms-bookmarks-next
        :desc "Seek to prev. bookmark in cur. track" "p" #'emms-bookmarks-prev
        :desc "Remove all bookmarks from cur. track" "c" #'emms-bookmarks-clear
        )
       ))
#+end_src
* IRC
#+BEGIN_SRC emacs-lisp
(map! :leader :desc "IRC" "oi" '=irc)

;; if you omit =:host=, ~SERVER~ will be used instead.
(after! circe
  (setq circe-default-part-message "(⌣_⌣”)"
        circe-default-quit-message "( ͡ಠ ʖ̯ ͡ಠ)")
  (set-irc-server! "irc.libera.chat"
    `(:tls t
      :port 6697
      :nick "_sad"
      :sasl-username ,(+pass-get-user "irc/libera.chat")
      :sasl-password (lambda (&rest _) (+pass-get-secret "irc/libera.chat"))
      :channels ("#emacs" "#systemcrafters")
      ))

  ;; in case circe will start supporting DCC
  ;; (set-irc-server! "irc.undernet.org"
  ;;   `(;; :tls t
  ;;     :port 6667
  ;;     :nick "seme4eg"
  ;;     :channels ("#ebooks" "#Bookz")
  ;;     ))
  ;; (set-irc-server! "irc.irchighway.net"
  ;;   `(:port 6669
  ;;     :nick "seme4eg"
  ;;     :channels ("#ebooks")
  ;;     ))
  )

;; TODO: write a function to upload image to 0x0 from a clipboard
(use-package! 0x0)
#+END_SRC

* Ewal
#+begin_src emacs-lisp
(use-package! ewal
  :init (setq ewal-use-built-in-always-p nil
              ewal-use-built-in-on-failure-p t
              ewal-built-in-palette "sexy-material")
  :config (progn
            (load-theme 'ewal-doom-one t) ;; ewal-doom-vibrant-theme
            (enable-theme 'ewal-doom-one)
            (ewal-evil-cursors-get-colors :apply t)))
#+end_src

* Other settings
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'auto-fill-mode)
;; (add-hook 'doom-after-init-modules-hook #'doom-load-session) ;; slows down

;; (setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn
(setq +lookup-open-url-fn #'eww
      ;; title / url / custom func
      eww-auto-rename-buffer 'title)

(after! dash-docs
  ;; +lookup-xwidget-webkit-open-url-fn
  (setq dash-docs-browser-func #'eww))
#+end_src

A useful macro (sometimes) for timing the execution of things. From
[[https://stackoverflow.com/questions/23622296/emacs-timing-execution-of-function-calls-in-emacs-lisp][StackOverflow]].

#+begin_src emacs-lisp
(defmacro zz/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))
#+end_src

* Custom f-s & advices
#+begin_src emacs-lisp
(defun sad-eww-other-window (orig-func &rest args)
  "Open eww web wowser in other window passing URL to origial 'eww' command'"
  (other-window 1)
  (apply orig-func args)
  (+popup/raise (selected-window)))

(advice-add 'eww :around #'sad-eww-other-window)

(defun sad-wrapped-eik ()
  "Call 'edmacro-insert-key' and wrap it's output in ~~ so those kbds look
better in org mode. Does nothing if was called on the beginning of a line"
  (interactive)
  (let ((opoint (point)))
    (unless (bolp)
      (insert "~")
      (call-interactively 'edmacro-insert-key)
      (backward-char)
      (insert "~"))))

(defun sad-theme-randomize ()
  "Loads random theme from the list of available custom themes.
Made this function only cuz im too often too lazy to make a choice."
  (interactive)
  (load-theme
   (nth (random (length (custom-available-themes))) (custom-available-themes)) t))

(defun advice--center-buffer (orig-fun &rest args)
  "Center butter."
  (evil-scroll-line-to-center (line-number-at-pos)))

(advice-add 'evil-ex-search :after #'advice--center-buffer)
(advice-add 'Info-next-reference :after #'advice--center-buffer)
(advice-add 'Info-prev-reference :after #'advice--center-buffer)

(defun sad-true-switch-last-buffer ()
  "Switch to REAL last open buffer (including buffers starting with *)."
  (interactive)
  (let ((previous-place (car (window-prev-buffers))))
    (when previous-place
      (switch-to-buffer (car previous-place))
      (goto-char (car (last previous-place))))))
#+end_src
