#+STARTUP: hideblocks overview

* Readme
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

Here are some additional functions/macros that could help you configure Doom:
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- ~map!~ for binding new keys

* Variables
Local:
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Global:
#+begin_src emacs-lisp
(setq
  ;; Some functionality uses this to identify you,
  ;; e.g. GPG configuration, email clients, file templates and snippets.
  user-full-name "sad"
  user-mail-address "418@duck.com"

  doom-theme 'doom-opera
  doom-font (font-spec :family "Source Code Pro" :size 16)

  org-directory "~/org/"
  fill-column 80 ;; 70, must be a default value to work
  display-fill-column-indicator-column 80
  better-jumper-context 'buffer
  ;; FIXME still doesn't switch
  input-method-history (list "russian-computer")
  projectile-project-search-path '("~/git/")
  )
#+end_src

Hlissner:
#+begin_src emacs-lisp
(setq
  ;; Line numbers are pretty slow all around. The performance boost of
  ;; disabling them outweighs the utility of always keeping them on.
  ;;    (c) hlissner
  display-line-numbers-type nil

  ;; IMO, modern editors have trained a bad habit into us all: a burning need for
  ;; completion all the time -- as we type, as we breathe, as we pray to the
  ;; ancient ones -- but how often do you *really* need that information? I say
  ;; rarely. So opt for manual completion
  ;;    (c) hlissner
  company-idle-delay nil
  )
#+end_src
* Keybindings
Learn how to properly define your custom keybindings you can in [[https://www.youtube.com/watch?v=QRmKpqDP5yE&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=28][this vid]]

#+begin_src emacs-lisp
(map! :leader
      :desc "M-x"
      "x"
      'execute-extended-command)
(map! :leader
      :desc "Git gutter popup hunk"
      "gv"
      'git-gutter:popup-hunk)
;; TODO: wrap a func below eith defadvice so it insets '~' before and after
(map! :leader
      :desc "Edmacro insert key"
      "i k"
      'edmacro-insert-key)
#+end_src
* Startup and Global modes
#+begin_src emacs-lisp
;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha '(90 . 90)) ;; (active . inactive)
;; set alpha on all *new* frames created by emacs
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
;; initial-frame-alist ?
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Prevents some cases of Emacs flickering
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

(global-subword-mode)
(global-display-fill-column-indicator-mode)
(global-auto-revert-mode)
#+end_src


* Development
** LSP
#+begin_src emacs-lisp
;; Disable invasive lsp-mode features
(setq
  lsp-ui-sideline-enable nil   ; not anymore useful than flycheck
  lsp-ui-doc-enable nil        ; slow and redundant with K
  lsp-enable-symbol-highlighting nil
  )

(setq lsp-vetur-format-default-formatter-html '"prettier")
#+end_src

** JS
#+begin_src emacs-lisp
;; does this even work? and is it even needed?
(set-docsets! 'js2-mode "JavaScript")

(after! js2-mode
  (add-hook 'js2-mode-hook #'jest-minor-mode)
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src
** Elm
#+begin_src emacs-lisp
;; (add-to-list 'company-backends 'elm-company)
;; (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src
** Shell
#+begin_src emacs-lisp
(after! sh-script
  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet)))
#+end_src
** Magit & forge
Magit:
#+begin_src emacs-lisp
(setq
 ;; magit-save-repository-buffers nil
 ;; Don't restore the wconf after quitting magit, it's jarring
 magit-inhibit-save-previous-winconf t
 transient-values '((magit-rebase "--autosquash" "--autostash")
                    (magit-pull "--rebase" "--autostash"))
 ;; Enable Gravatars REVIEW does it even works?
 ;; This will enable gravatars when viewing commits.
 ;; The service used by default is Libravatar.
 magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
 )
#+end_src

Forge:
#+begin_src emacs-lisp
;; my attempts to make forge work with custom gitlab url...
;; did not suffice elisp knowledge to do that (not all forge functions were working..)
(after! forge
  (push '("gitlab.medpoint24.ru" "gitlab.medpoint24.ru/api/v4"
          "gitlab.medpoint24.ru" forge-gitlab-repository) forge-alist))
#+end_src

* Evil
#+begin_src emacs-lisp
;; Focus new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* Org
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
;; (add-hook! 'org-mode-hook (company-mode -1))
(add-hook! 'org-capture-mode-hook (company-mode -1))

;; didn't work out for me cuz https://orgmode.org/manual/Custom-time-format.html
;; (setq org-time-stamp-custom-formats '("<%a %d-%m-%Y>" . "<%a %d-%m-%Y %H:%M>"))
;; (setq org-display-custom-times t)

(after! org
  (setq
   org-src-window-setup 'current-window
   ;; org-ellipsis " â–¾ "
   org-hide-emphasis-markers t)
  ;; org capture templates redefining
  (setq org-capture-templates
    '(("a" "Tea entry" entry
        (file +org-capture-project-notes-file)
        "%[~/git/tea/templates/newEntry]"
        :jump-to-captured t
        :immediate-finish t
        :clock-in t
        :clock-keep t
        :empty-lines 1)
       ("b" "Buffer settings" plain
         (file +org-capture-project-notes-file)
         "%[~/git/tea/templates/bufferSettings]"
         :prepend t
         :immediate-finish t
         :empty-lines-after 1)
       ("t" "Personal todo" entry
         (file +org-capture-todo-file)
         "* [ ] %?\n%i\n%a" :prepend t)
       ("n" "Personal notes" entry
         (file +org-capture-notes-file)
         "* %u %?\n%i\n" :prepend t)
       ("j" "Journal" entry
         (file+olp+datetree +org-capture-journal-file)
         "* %U %?\n%i\n" :prepend t)
       ("p" "Templates for projects")
       ("pt" "Project-local todo" entry
         (file +org-capture-project-todo-file)
         "* TODO %?\n%i\n%a" :prepend t)
       ("pn" "Project-local notes" entry
         (file +org-capture-project-notes-file)
         "* %U %?\n%i\n%a" :prepend t)
       ("pc" "Project-local changelog" entry
         (file-headline +org-capture-project-changelog-file "Unreleased")
         "* %U %?\n%i\n" :prepend t)
       ("o" "Centralized templates for projects")
       ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n " :heading "Tasks" :prepend nil)
       ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n " :heading "Notes" :prepend t)
       ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n" :heading "Changelog" :prepend t))
    )
  (set-face-attribute 'org-link nil
                      :weight 'normal
                      :background nil)
  (set-face-attribute 'org-code nil
                      :foreground "#a9a1e1"
                      :background nil)
  (set-face-attribute 'org-date nil
                      :foreground "#5B6268"
                      :background nil)
  (set-face-attribute 'org-level-1 nil
                      :foreground "#dbf6ff"
                      :background nil
                      :height 1.2
                      :weight 'normal)
  (set-face-attribute 'org-level-2 nil
                      :foreground "#fbeffc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-3 nil
                      :foreground "#b5ddfc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-4 nil
                      :foreground "#faccfc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-5 nil
                      :weight 'normal)
  (set-face-attribute 'org-level-6 nil
                      :weight 'normal)
  (set-face-attribute 'org-document-title nil
                      :foreground "SlateGray1"
                      :background nil
                      :height 1.75
                      :weight 'bold))

;; org-mode agenda options
;; TODO: how to do it with evil embrace?
;; now after typing 'C-c C-,' u will will get a new option to chose from
(after! org (add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp\n")))

#+end_src

** Org journal
#+begin_src emacs-lisp
;; journal setup
(setq
  org-journal-date-prefix "#+TITLE: "
  org-journal-time-prefix "* "
  org-journal-date-format "%a, %d-%m-%Y"
  org-journal-file-format "%Y-%m-%d.org")

#+end_src
* Treemacs
#+begin_src emacs-lisp
;; colors for treemacs icons
(after! treemacs
  (treemacs-follow-mode)
  (setq doom-themes-treemacs-theme "doom-colors"
        treemacs-space-between-root-nodes      nil ;; t
        treemacs-width                         32  ;; 35
        ))
;; If you still want the default icons, this works for me
;; (after! (doom-themes treemacs)
;;   (setq doom-themes-treemacs-theme "Default"))
#+end_src

* Emacs everywhere
#+begin_src emacs-lisp
;; :app everywhere FIXME: throws error when first loading
(after! emacs-everywhere
  ;; Easier to match with a bspwm rule:
  ;;   bspc rule -a 'Emacs:emacs-everywhere' state=floating sticky=on
  (setq emacs-everywhere-frame-name-format "emacs-anywhere")

  ;; The modeline is not useful to me in the popup window. It looks much nicer
  ;; to hide it.
  (remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)

  ;; Semi-center it over the target window, rather than at the cursor position
  ;; (which could be anywhere).
  (defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
    :override #'emacs-everywhere-set-frame-position
    (cl-destructuring-bind (x y width height)
        (emacs-everywhere-window-geometry window-info)
      (set-frame-position frame
                          (+ x (/ width 2) (- (/ width 2)))
                          (+ y (/ height 2))))))
#+end_src
* Doom dashboard
#+begin_src emacs-lisp
;; (setq fancy-splash-image (concat doom-private-dir "splash.png"))
;; Hide the menu for as minimalistic a startup screen as possible.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

;; TODO: how to redefine it without last function? so i don't see link for github
;; (setq +doom-dashboard-functions
;;       (doom-dashboard-widget-banner
;;        doom-dashboard-widget-loaded)
;;       )
#+end_src

* EXWM
- [ ] move it to separate file, tangle it and include it if [[https://github.com/daviwil/dotfiles/blob/0e034ebb688633082a3b0c201b0bc834a9821091/Emacs.org#desktop-environment][condition]] true.
- [ ] find out how to setup same [[https://github.com/daviwil/dotfiles/blob/bf4bac536598894679b4496e8c265953efc29a26/Desktop.org#system-settings][sys-settings]] file to store my background img in
- [ ] check what =vimb= is & qutebroswer (both currently commented out)

** TODO Desktop Entry
todo: the file linking to usr/share/xsessions file isn't working
#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes
[Desktop Entry]
Name=exwm
Exec=sh ~/.doom.d/exwm/init.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopNames=exwm
#+end_src
** Launch script
#+begin_src shell :tangle ./exwm/init.sh :shebang #!/bin/sh
. ~/.profile              # Source .profile for common environment vars
xhost +SI:localuser:$USER # Disable access control for the current user
xsettingsd &              # Run xsettingsd to progagate font and theme settings
xset -b                   # Turn off the system bell
xss-lock -- slock &       # Enable screen locking on suspend
xset r rate 200 60 # Set keyboard repeat rate.

# Make Java applications aware this is a non-reparenting window manager.
export _JAVA_AWT_WM_NONREPARENTING=1

# run the screen compositor
picom & # new name for 'compton'

# -mm -- maximise emacs window on startup
exec dbus-launch --exit-with-session emacs -mm --debug-init --use-exwm
#+end_src
** Xmodmap setup (Ctrl to Caps)
#+begin_src sh :tangle ./exwm/Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L
add Lock = Control_R
#+end_src
** desktop.el
:PROPERTIES:
:header-args: tangle: ~/.doom.d/exwm/desktop.el
:END:

*** Prerequisites
#+begin_src emacs-lisp
;; (require 'exwm)
(require 'exwm-systemtray)
;; (setq exwm-systemtray-height 32)
(exwm-systemtray-enable)
;; (require 'exwm-randr)
;; (exwm-randr-enable)
#+end_src
*** TODO Window Management
#+begin_src emacs-lisp
;; Annoying focus issues
(setq mouse-autoselect-window nil
        focus-follows-mouse t
        exwm-workspace-warp-cursor t
        exwm-workspace-number 3)
        ;exwm-workspace-display-echo-area-timeout 5
        ;exwm-workspace-minibuffer-position 'bottom)

;; update buffer names of opened windows whenever 2 windows with same
;; name appear (like Opera & Opera<1> - u gonna see that)
(add-hook 'exwm-update-class-hook
          (lambda ()
            (exwm-workspace-rename-buffer exwm-class-name)))
;; (add-hook 'exwm-update-title-hook
;;           (lambda ()
;;             (pcase exwm-class-name
;;               ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
;;               ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))

(exwm-enable)
#+end_src
*** TODO Helper Functions
#+begin_src emacs-lisp
(defun exwm/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

;; (defun exwm/bind-function (key invocation &rest bindings)
;;   "Bind KEYs to FUNCTIONs globally"
;;   (while key
;;     (exwm-input-set-key (kbd key)
;;                         `(lambda ()
;;                            (interactive)
;;                            (funcall ',invocation)))
;;     (setq key (pop bindings)
;;           invocation (pop bindings))))

;; (defun exwm/bind-command (key command &rest bindings)
;;   "Bind KEYs to COMMANDs globally"
;;   (while key
;;     (exwm-input-set-key (kbd key)
;;                         `(lambda ()
;;                            (interactive)
;;                            (exwm/run-in-background ,command)))
;;     (setq key (pop bindings)
;;           command (pop bindings))))
#+end_src
*** TODO Configuration
#+begin_src emacs-lisp
(defun efs/exwm-init-hook ()
  (exwm-workspace-switch-create 1)
  ;; Launch apps that will run in the background:
  ;; (exwm/run-in-background "dunst")
  (efs/run-in-background "nm-applet") ;; - network-manager system tray icons
  ;; (exwm/run-in-background "syncthing-gtk --minimized")
  ;; (exwm/run-in-background "udiskie -t")
  ;; (exwm/run-in-background "redshift -l 47.675510:-122.203362 -t 6500:3500")

  ;; (defun dw/setup-window-by-class ()
  ;;   (interactive)
  ;;   (pcase exwm-class-name
  ;;     ("Emacs" (call-interactively #'exwm-input-toggle-keyboard))
  ;;     ("Xephyr" (call-interactively #'exwm-input-toggle-keyboard))
  ;;     ("discord" (exwm-workspace-move-window 3))
  ;;     ("Microsoft Teams - Preview" (exwm-workspace-move-window 3))
  ;;     ("Spotify" (exwm-workspace-move-window 4))
  ;;     ("Vimb" (exwm-workspace-move-window 2))
  ;;     ("qutebrowser" (exwm-workspace-move-window 2))
  ;;     ("qjackctl" (exwm-floating-toggle-floating))
  ;;     ("mpv" (exwm-floating-toggle-floating)
  ;;      (dw/exwm-floating-toggle-pinned))
  ;;     ("gsi" (exwm-input-toggle-keyboard)))
  )

;; (add-hook 'exwm-mode-hook
;;             (lambda ()
;;               (evil-local-set-key 'motion (kbd "C-u") nil)))

;; Do some post-init setup
(add-hook 'exwm-init-hook #'dw/exwm-init-hook)

;; Manipulate windows as they're created
;; (add-hook 'exwm-manage-finish-hook
;;           (lambda ()
;;             ;; Send the window where it belongs
;;             (dw/setup-window-by-class)))

;; Hide the modeline on all X windows
                                        ;(exwm-layout-hide-mode-line)))

;; Hide the modeline on all floating windows
(add-hook 'exwm-floating-setup-hook
          (lambda ()
            (exwm-layout-hide-mode-line)))
#+end_src
*** TODO Desktop Configuration
#+begin_src emacs-lisp
;; rebind caps lock to ctrl and caps to right control
(defun dw/run-xmodmap ()
  (interactive)
  ;; TODO: what is 'i3'? hear lots bout it, but still dunno
  ;; (start-process-shell-command "xmodmap" nil "xmodmap ~/.dotfiles/.config/i3/Xmodmap"))
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.doom.d/exwm/Xmodmap"))

;; (defun dw/update-wallpapers ()
;;    ;; for command below to work install it first
;;    ;; also u might need to change the path to the bg as well
;;   (interactive)
;;   (start-process-shell-command
;;    "feh" nil
;;    ;; "feh" nil "feh --bg-scale ~/Pictures/xXfymMYfBFM.jpg"))
;;    (format "feh --bg-scale ~/Pictures/%s" (alist-get 'desktop/background dw/system-settings))))

;; (setq dw/panel-process nil)
;; (defun dw/kill-panel ()
;;   (interactive)
;;   (when dw/panel-process
;;     (ignore-errors
;;       (kill-process dw/panel-process)))
;;   (setq dw/panel-process nil))

;; (defun dw/start-panel ()
;;   (interactive)
;;   (dw/kill-panel)
;;   (setq dw/panel-process (start-process-shell-command "polybar" nil "polybar panel")))

;; (defun dw/update-screen-layout ()
;;   (interactive)
;;   (let ((layout-script "~/.bin/update-screens"))
;;      (message "Running screen layout script: %s" layout-script)
;;      (start-process-shell-command "xrandr" nil layout-script)))

(defun dw/configure-desktop ()
  (interactive)
    (dw/run-xmodmap)
    ;; (dw/update-screen-layout)
    (run-at-time "2 sec" nil (lambda () (dw/update-wallpapers))))

(defun dw/on-exwm-init ()
  (dw/configure-desktop)
  ;; (dw/start-panel)
  )

;; (when dw/exwm-enabled
;;   ;; Configure the desktop for first load
;;   (add-hook 'exwm-init-hook #'dw/on-exwm-init))
#+end_src
*** TODO Panel
*** Kbds
#+begin_src emacs-lisp
;; These keys should always pass through to Emacs (in line-mode)
(setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-h
        ;; ?\C-u
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j ;; buffer list
        ;; ?\C-\M-k  ;; Browser list
        ;; ?\C-\M-n  ;; Next workspace
        ;; ?\C-\M-'  ;; Popper toggle
        ?\C-\ ;; ctrl + space
        ;; ?\C-\;
        ))

;; Ctrl+Q will enable the next key to be sent directly to the window
(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

;; (defun exwm/run-vimb ()
;;   (exwm/run-in-background "vimb")
;;   (exwm-workspace-switch-create 2))

;; (defun exwm/run-qute ()
;;   (exwm/run-in-background "qutebrowser")
;;   (exwm-workspace-switch-create 2))

;; (exwm/bind-function
;;  "s-o" 'exwm/run-qute
;;  "s-q" 'kill-buffer)

;; (exwm/bind-command
;;  "s-p" "playerctl play-pause"
;;  "s-[" "playerctl previous"
;;  "s-]" "playerctl next")

;; TODO: what's that pkg?
;; (setup (:pkg desktop-environment)
;;     (desktop-environment-mode)
;;     (:option desktop-environment-brightness-small-increment "2%+"
;;              desktop-environment-brightness-small-decrement "2%-"
;;              desktop-environment-brightness-normal-increment "5%+"
;;              desktop-environment-brightness-normal-decrement "5%-"
;;              desktop-environment-screenshot-command "flameshot gui"))

;; set up global key bindings. These always work, no matter the input state.
;; keep in mind that changing this list after EXWM initializes has no effect.
(setq exwm-input-global-keys
      `(
        ;; reset to line-mode (C-c C-k switches to char-mode via
        ;; exwm-input-release-keyboard
        ([?\s-\C-r] . exwm-reset)
        ;; ([?\s-r] . exwm-reset)

        ;; Move between windows
        ([?\s-h] . windmove-left)
        ([?\s-l] . windmove-right)
        ([?\s-k] . windmove-up)
        ([?\s-j] . windmove-down)

        ;; Launch applications via chell command
        ([?\s-o] . (lambda (command)
                     (interactive (list (read-shell-command "$ ")))
                     (start-process-shell-command command nil command)))

        ([?\s-w] . exwm-workspace-switch)

        ;; Bind "s-<f2>" to "slock", a simple X display locker.
        ([s-f2] . (lambda ()
                    (interactive)
                    (start-process "" nil "/usr/bin/slock")))

        ([?\s-i] . exwm-input-toggle-keyboard)
        ([?\s-e] . dired-jump)
        ([?\s-E] . (lambda () (interactive) (dired "~")))
        ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
        ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
        ,@(mapcar (lambda (i)
                    `(,(kbd (format "s-%d" i)) .
                      (lambda ()
                        (interactive)
                        (exwm-workspace-switch-create ,i))))
                  (number-sequence 0 9))))

(exwm-input-set-key (kbd "<s-return>") 'vterm)
;; TODO: app-launcher? instead of 3 lines from above
;; (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
(exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
#+end_src
* Other setting
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'auto-fill-mode)
#+end_src
