#+STARTUP: hideblocks overview

* Readme
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

Here are some additional functions/macros that could help you configure Doom:
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- ~map!~ for binding new keys

* Variables
Local:
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Global:
#+begin_src emacs-lisp
(setq
  ;; Some functionality uses this to identify you,
  ;; e.g. GPG configuration, email clients, file templates and snippets.
  user-full-name "sad"
  user-mail-address "418@duck.com"

  doom-theme 'doom-opera
  doom-font (font-spec :family "Source Code Pro" :size 16)

  org-directory "~/org/"
  fill-column 80 ;; 70, must be a default value to work
  display-fill-column-indicator-column 80
  better-jumper-context 'buffer
  ;; FIXME still doesn't switch
  input-method-history (list "russian-computer")
  projectile-project-search-path '("~/git/")
  )
#+end_src

Hlissner:
#+begin_src emacs-lisp
(setq
  ;; Line numbers are pretty slow all around. The performance boost of
  ;; disabling them outweighs the utility of always keeping them on.
  ;;    (c) hlissner
  display-line-numbers-type nil

  ;; IMO, modern editors have trained a bad habit into us all: a burning need for
  ;; completion all the time -- as we type, as we breathe, as we pray to the
  ;; ancient ones -- but how often do you *really* need that information? I say
  ;; rarely. So opt for manual completion
  ;;    (c) hlissner
  company-idle-delay nil
  )
#+end_src
* Keybindings
Learn how to properly define your custom keybindings you can in [[https://www.youtube.com/watch?v=QRmKpqDP5yE&list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj&index=28][this vid]]

#+begin_src emacs-lisp
(map! :leader
      :desc "M-x"
      "x"
      'execute-extended-command)
(map! :leader
      :desc "Git gutter popup hunk"
      "gv"
      'git-gutter:popup-hunk)
;; TODO: wrap a func below eith defadvice so it insets '~' before and after
(map! :leader
      :desc "Edmacro insert key"
      "i k"
      'edmacro-insert-key)
#+end_src
* Startup and Global modes
#+begin_src emacs-lisp
;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha '(90 . 90)) ;; (active . inactive)
;; set alpha on all *new* frames created by emacs
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
;; initial-frame-alist ?
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Prevents some cases of Emacs flickering
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))

(global-subword-mode)
(global-display-fill-column-indicator-mode)
(global-auto-revert-mode)
#+end_src


* Development
** LSP
#+begin_src emacs-lisp
;; Disable invasive lsp-mode features
(setq
  lsp-ui-sideline-enable nil   ; not anymore useful than flycheck
  lsp-ui-doc-enable nil        ; slow and redundant with K
  lsp-enable-symbol-highlighting nil
  )

(setq lsp-vetur-format-default-formatter-html '"prettier")
#+end_src

** JS
#+begin_src emacs-lisp
;; does this even work? and is it even needed?
(set-docsets! 'js2-mode "JavaScript")

(after! js2-mode
  (add-hook 'js2-mode-hook #'jest-minor-mode)
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src
** Elm
#+begin_src emacs-lisp
;; (add-to-list 'company-backends 'elm-company)
;; (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src
** Shell
#+begin_src emacs-lisp
(after! sh-script
  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet)))
#+end_src
** Magit & forge
Magit:
#+begin_src emacs-lisp
(setq
 ;; magit-save-repository-buffers nil
 ;; Don't restore the wconf after quitting magit, it's jarring
 magit-inhibit-save-previous-winconf t
 transient-values '((magit-rebase "--autosquash" "--autostash")
                    (magit-pull "--rebase" "--autostash"))
 ;; Enable Gravatars REVIEW does it even works?
 ;; This will enable gravatars when viewing commits.
 ;; The service used by default is Libravatar.
 magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
 )
#+end_src

Forge:
#+begin_src emacs-lisp
;; my attempts to make forge work with custom gitlab url...
;; did not suffice elisp knowledge to do that (not all forge functions were working..)
(after! forge
  (push '("gitlab.medpoint24.ru" "gitlab.medpoint24.ru/api/v4"
          "gitlab.medpoint24.ru" forge-gitlab-repository) forge-alist))
#+end_src

* Evil
#+begin_src emacs-lisp
;; Focus new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

* Org
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-fill-mode)
;; (add-hook! 'org-mode-hook (company-mode -1))
(add-hook! 'org-capture-mode-hook (company-mode -1))

(setq
  ;; org-src-window-setup 'current-window
  org-ellipsis " â–¾ "
  org-hide-emphasis-markers t
  )

;; didn't work out for me cuz https://orgmode.org/manual/Custom-time-format.html
;; (setq org-time-stamp-custom-formats '("<%a %d-%m-%Y>" . "<%a %d-%m-%Y %H:%M>"))
;; (setq org-display-custom-times t)

(after! org
  ;; org capture templates redefining
  (setq org-capture-templates
    '(("a" "Tea entry" entry
        (file +org-capture-project-notes-file)
        "%[~/git/tea/templates/newEntry]"
        :jump-to-captured t
        :immediate-finish t
        :clock-in t
        :clock-keep t
        :empty-lines 1)
       ("b" "Buffer settings" plain
         (file +org-capture-project-notes-file)
         "%[~/git/tea/templates/bufferSettings]"
         :prepend t
         :immediate-finish t
         :empty-lines-after 1)
       ("t" "Personal todo" entry
         (file +org-capture-todo-file)
         "* [ ] %?\n%i\n%a" :prepend t)
       ("n" "Personal notes" entry
         (file +org-capture-notes-file)
         "* %u %?\n%i\n" :prepend t)
       ("j" "Journal" entry
         (file+olp+datetree +org-capture-journal-file)
         "* %U %?\n%i\n" :prepend t)
       ("p" "Templates for projects")
       ("pt" "Project-local todo" entry
         (file +org-capture-project-todo-file)
         "* TODO %?\n%i\n%a" :prepend t)
       ("pn" "Project-local notes" entry
         (file +org-capture-project-notes-file)
         "* %U %?\n%i\n%a" :prepend t)
       ("pc" "Project-local changelog" entry
         (file-headline +org-capture-project-changelog-file "Unreleased")
         "* %U %?\n%i\n" :prepend t)
       ("o" "Centralized templates for projects")
       ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n " :heading "Tasks" :prepend nil)
       ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n " :heading "Notes" :prepend t)
       ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n" :heading "Changelog" :prepend t))
    )
  (set-face-attribute 'org-link nil
                      :weight 'normal
                      :background nil)
  (set-face-attribute 'org-code nil
                      :foreground "#a9a1e1"
                      :background nil)
  (set-face-attribute 'org-date nil
                      :foreground "#5B6268"
                      :background nil)
  (set-face-attribute 'org-level-1 nil
                      :foreground "#dbf6ff"
                      :background nil
                      :height 1.2
                      :weight 'normal)
  (set-face-attribute 'org-level-2 nil
                      :foreground "#fbeffc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-3 nil
                      :foreground "#b5ddfc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-4 nil
                      :foreground "#faccfc"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-5 nil
                      :weight 'normal)
  (set-face-attribute 'org-level-6 nil
                      :weight 'normal)
  (set-face-attribute 'org-document-title nil
                      :foreground "SlateGray1"
                      :background nil
                      :height 1.75
                      :weight 'bold))

;; org-mode agenda options
;; TODO: how to do it with evil embrace?
;; now after typing 'C-c C-,' u will will get a new option to chose from
(after! org (add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp\n")))

#+end_src

** Org journal
#+begin_src emacs-lisp
;; journal setup
(setq
  org-journal-date-prefix "#+TITLE: "
  org-journal-time-prefix "* "
  org-journal-date-format "%a, %d-%m-%Y"
  org-journal-file-format "%Y-%m-%d.org")

#+end_src
* Treemacs
#+begin_src emacs-lisp
;; colors for treemacs icons
(after! treemacs
  (treemacs-follow-mode)
  (setq doom-themes-treemacs-theme "doom-colors"
        treemacs-space-between-root-nodes      nil ;; t
        treemacs-width                         32  ;; 35
        ))
;; If you still want the default icons, this works for me
;; (after! (doom-themes treemacs)
;;   (setq doom-themes-treemacs-theme "Default"))
#+end_src

* Emacs everywhere
#+begin_src emacs-lisp
;; :app everywhere FIXME: throws error when first loading
(after! emacs-everywhere
  ;; Easier to match with a bspwm rule:
  ;;   bspc rule -a 'Emacs:emacs-everywhere' state=floating sticky=on
  (setq emacs-everywhere-frame-name-format "emacs-anywhere")

  ;; The modeline is not useful to me in the popup window. It looks much nicer
  ;; to hide it.
  (remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)

  ;; Semi-center it over the target window, rather than at the cursor position
  ;; (which could be anywhere).
  (defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
    :override #'emacs-everywhere-set-frame-position
    (cl-destructuring-bind (x y width height)
        (emacs-everywhere-window-geometry window-info)
      (set-frame-position frame
                          (+ x (/ width 2) (- (/ width 2)))
                          (+ y (/ height 2))))))
#+end_src
* Doom dashboard
#+begin_src emacs-lisp
;; (setq fancy-splash-image (concat doom-private-dir "splash.png"))
;; Hide the menu for as minimalistic a startup screen as possible.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

;; TODO: how to redefine it without last function? so i don't see link for github
;; (setq +doom-dashboard-functions
;;       (doom-dashboard-widget-banner
;;        doom-dashboard-widget-loaded)
;;       )
#+end_src

* EXWM
#+begin_src emacs-lisp
(after! exwm
  (add-to-list 'load-path "~/.emacs.d/.local/straight/repos/xelb/")
  (add-to-list 'load-path "~/.emacs.d/.local/straight/repos/exwm/")

  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command parts)))))

  (defun efs/exwm-init-hook ()
    (exwm-workspace-switch-create 1)
    ;; Launch apps that will run in the background:
    (efs/run-in-background "nm-applet")) ;; nm-applet is a network-manager system tray icons

  ;; update buffer names of opened windows whenever 2 windows with same
  ;; name appear (like Opera & Opera<1> - u gonna see that)
  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  ;; When window "class" updates, use it to set the buffer name
  (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;; (add-hook 'exwm-init-hook #'efs/exwm-init-hook)

  ;; rebind caps lock to ctrl and caps to right control
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.doom.d/exwm/Xmodmap")

  (setq exwm-workspace-number 3)

  ;; These keys should always pass through to Emacs (in line-mode)
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j ;; buffer list
          ?\C-\ ;; ctrl + space
          ))

  ;; Ctrl+Q will enable the next key to be sent directly to the window
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; set up global key bindings. These always work, no matter the input state.
  ;; keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; reset to line-mode (C-c C-k switches to char-mode via
          ;; exwm-input-release-keyboard
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([?\s-h]  . windmove-left)
          ([?\s-l] . windmove-right)
          ([?\s-k]    . windmove-up)
          ([?\s-j]  . windmove-down)

          ;; Launch applications via chell command
          ([?\s-o] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ([?\s-w] . exwm-workspace-switch)

          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (defun efs/set-wallpaper ()
    (interactive)
    (start-process-shell-command
     ;; for command below to work (it sets bg), u gonna need to install it first
     ;; also u might need to change the path to the bg as well
     "feh" nil "feh --bg-scale ~/Pictures/xXfymMYfBFM.jpg"))

  ;; if u have any problems with EXWM resolution, make sure u call
  ;; this func AFTER u do ANYTHING with resolution
  (efs/set-wallpaper)

  (require 'exwm-systemtray)
  ;; (setq exwm-systemtray-height 32)
  (exwm-systemtray-enable)

  (exwm-enable)
  )
#+end_src

** Desktop Entry
#+begin_src shell :tangle ./exwm/EXWM.desktop :mkdirp yes
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh ~/.doom.d/exwm/init.sh
Type=Application
# X-LightDM-DesktopName=exwm
# DesktopNames=exwm
#+end_src
** Launch script
#+begin_src shell :tangle ./exwm/init.sh :shebang #!/bin/sh
#!/usr/bin/env bash

# run the screen compositor
picom & # new name for 'compton'

# -mm -- maximise emacs window on startup
exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.doom.d/config.el
#+end_src
** Ctrl to Caps
#+begin_src sh :tangle ./exwm/Xmodmap
clear lock
clear control
keycode 66 = Control_L
add control = Control_L
add Lock = Control_R
#+end_src

* Other setting
#+begin_src emacs-lisp
(add-hook 'markdown-mode-hook 'auto-fill-mode)
#+end_src
